///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (2017) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once


#include <plugins/pyscript/PyScript.h>
#include <plugins/pyscript/engine/ScriptEngine.h>
#include <core/dataset/pipeline/Modifier.h>
#include <core/dataset/pipeline/ModifierApplication.h>

namespace PyScript {

using namespace Ovito;

class PythonScriptModifierApplication;	// defined below.

/**
 * \brief A modifier that executes a user-defined Python function.
 */
class OVITO_PYSCRIPT_EXPORT PythonScriptModifier : public Modifier
{
	Q_OBJECT
	OVITO_CLASS(PythonScriptModifier)
	Q_CLASSINFO("DisplayName", "Python script");
	Q_CLASSINFO("ModifierCategory", "Modification");

public:

	/// \brief Constructor.
	Q_INVOKABLE PythonScriptModifier(DataSet* dataset);

	/// \brief Create a new modifier application that refers to this modifier instance.
	virtual OORef<ModifierApplication> createModifierApplication() override;
	
	/// Modifies the input data.
	virtual Future<PipelineFlowState> evaluate(TimePoint time, ModifierApplication* modApp, const PipelineFlowState& input) override;

	/// Returns the Python script function executed by the modifier.
	py::object scriptFunction() {
		if(_modifyScriptFunction)
			return _modifyScriptFunction;
		else
			return py::none();
	}

	/// Sets the Python script function to be executed by the modifier.
	void setScriptFunction(py::function func) {
		_modifyScriptFunction = std::move(func);
		notifyDependents(ReferenceEvent::TargetChanged);
	}

	/// Returns the log output generated by the script during the compilation phase.
	const QString& scriptCompilationOutput() const { return _scriptCompilationOutput; }

	/// Loads the default values of this object's parameter fields.
	virtual void loadUserDefaults() override;

protected:

	/// Is called when the value of a property of this object has changed.
	virtual void propertyChanged(const PropertyFieldDescriptor& field) override;

	/// Compiles the script entered by the user.
	void compileScript(ScriptEngine& engine);

	/// Prepares the script engine, which is needed for script execution.
	ScriptEngine* getScriptEngine();
	
private Q_SLOTS:

	/// Is called whenever the script generates some log output.
	void onScriptOutput(const QString& text);

private:

	/// The Python script.
	DECLARE_MODIFIABLE_PROPERTY_FIELD(QString, script, setScript);

	/// The Python engine owned by this modifier instance.
	/// Only used if there is no global script engine currently active.
	std::shared_ptr<ScriptEngine> _scriptEngine;

	/// The compiled Python modifier function.
	py::function _modifyScriptFunction;

	/// The captured log output of the script compilation step, which is displayed in the graphical user interface.
	QString _scriptCompilationOutput;

	/// The modifier application in whose context the current script execution happens.
	PythonScriptModifierApplication* _activeModApp = nullptr;

	/// The namespace (scope) the script will be executed in.
	py::object _mainNamespacePrototype;
};

/**
 * \brief The type of ModifierApplication create for a PythonScriptModifier 
 *        when it is inserted into in a data pipeline.
 */
class OVITO_PYSCRIPT_EXPORT PythonScriptModifierApplication : public ModifierApplication
{
	Q_OBJECT
	OVITO_CLASS(PythonScriptModifierApplication)

public:

	/// Constructor.
	Q_INVOKABLE PythonScriptModifierApplication(DataSet* dataset) : ModifierApplication(dataset) {}
 
	/// Returns the log output generated by the script during modifier evaluation.
	const QString& logOutput() const { return _scriptLogOutput; }

	/// Clears the log buffer.
	void clearLogOutput() { _scriptLogOutput.clear(); }
	
	/// Adds text generated by the running script to the log buffer.
	void appendLogOutput(const QString& text) { _scriptLogOutput += text; }
 
private:

	/// The captured log output of the script execution, which is displayed in the graphical user interface.
	QString _scriptLogOutput;	
};

}	// End of namespace
