///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (2017) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once


#include <plugins/pyscript/PyScript.h>
#include <plugins/pyscript/engine/ScriptEngine.h>
#include <core/viewport/overlays/ViewportOverlay.h>

namespace PyScript {

using namespace Ovito;

/**
 * \brief A viewport overlay that runs a Python script which paints into the viewport.
 */
class OVITO_PYSCRIPT_EXPORT PythonViewportOverlay : public ViewportOverlay
{
	Q_OBJECT
	OVITO_CLASS(PythonViewportOverlay)
	Q_CLASSINFO("DisplayName", "Python script");	
	
public:

	/// \brief Constructor.
	Q_INVOKABLE PythonViewportOverlay(DataSet* dataset);

	/// This method asks the overlay to paint its contents over the given viewport.
	virtual void render(Viewport* viewport, TimePoint time, QPainter& painter, 
						const ViewProjectionParameters& projParams, RenderSettings* renderSettings,
						bool interactiveViewport, TaskManager& taskManager) override;

	/// Returns the log output generated by the script during the compilation phase.
	const QString& scriptCompilationOutput() const { return _scriptCompilationOutput; }

	/// Returns the log output generated by the script during the rendering phase.
	const QString& scriptRenderingOutput() const { return _scriptRenderingOutput; }
	
	/// Returns the Python script function executed by the overlay.
	py::object scriptFunction() {
		if(_overlayScriptFunction)
			return _overlayScriptFunction;
		else
			return py::none();
	}

	/// Sets the Python script function to be executed by the overlay.
	void setScriptFunction(py::function func) {
		_overlayScriptFunction = std::move(func);
		notifyDependents(ReferenceEvent::TargetChanged);
	}

	/// Loads the default values of this object's parameter fields.
	virtual void loadUserDefaults() override;

protected:

	/// Is called when the value of a property of this object has changed.
	virtual void propertyChanged(const PropertyFieldDescriptor& field) override;

	/// Compiles the script entered by the user.
	void compileScript();

	/// Prepares the script engine, which is needed for script execution.
	ScriptEngine* getScriptEngine();
	
private Q_SLOTS:

	/// Is called when the script generates some output.
	void onScriptOutput(const QString& text);

private:

	/// The Python script source code.
	DECLARE_MODIFIABLE_PROPERTY_FIELD(QString, script, setScript);

	/// The Python engine.
	std::unique_ptr<ScriptEngine> _scriptEngine;

	/// The compiled script function.
	py::function _overlayScriptFunction;
	
	/// The captured log output of the script compilation step, which is displayed in the graphical user interface.
	QString _scriptCompilationOutput;

	/// The captured log output of the script execution, which is displayed in the graphical user interface.
	QString _scriptRenderingOutput;	

	/// The namespace (scope) the script will be executed in.
	py::object _mainNamespacePrototype;
};

}	// End of namespace


