///////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (2018) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once


#include <plugins/stdobj/gui/StdObjGui.h>
#include <plugins/stdobj/series/DataSeriesObject.h>
#include <plugins/stdobj/series/DataSeriesProperty.h>
#include <core/oo/RefTargetListener.h>
#include <qwt/qwt_plot.h>

class QwtPlotCurve;
class QwtPlotLegendItem;

namespace Ovito { namespace StdObj {

/**
 * \brief A widget that plots the data of a DataSeriesObject.
 */
class OVITO_STDOBJGUI_EXPORT DataSeriesPlotWidget : public QwtPlot
{
	Q_OBJECT

public:

	/// Constructor.
	DataSeriesPlotWidget(QWidget* parent = nullptr);

	/// Returns the data series object currently being plotted.
	DataSeriesObject* series() const { return _series.target(); }

	/// Sets the data series object to be plotted.
	void setSeries(DataSeriesObject* series, const PipelineFlowState& input);

private Q_SLOTS:

	/// This handles reference events generated by the data series.
	void onSeriesNotificationEvent(const ReferenceEvent& event);

	/// This handles reference events generated by one of the data properties.
	void onPropertyNotificationEvent(RefTarget* source, const ReferenceEvent& event);

	/// Regenerates the plot. 
	/// This function is called whenever a new data series has been loaded into widget or if the current series data changes.
	void updateDataPlot();

private:

	/// Reference to the current data series shown in the plot widget.
	RefTargetListener<DataSeriesObject> _series;

	/// Reference to the list of data properties shown in the plot widget.
	VectorRefTargetListener<DataSeriesProperty> _properties;

	/// The plot item(s).
    std::vector<QwtPlotCurve*> _curves;	

	/// The plot legend.
	QwtPlotLegendItem* _legend = nullptr;
};

}	// End of namespace
}	// End of namespace
