///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (2013) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

/**
 * \file ReferenceEvent.h
 * \brief Contains the definition of the Ovito::ReferenceEvent class.
 */

#ifndef __OVITO_REFERENCE_EVENT_H
#define __OVITO_REFERENCE_EVENT_H

#include <core/Core.h>

namespace Ovito {

class RefTarget;						// defined in RefTarget.h
class PropertyFieldDescriptor;			// defined in PropertyFieldDescriptor.h

/**
 * \brief Generic base class for events generated by a RefTarget object.
 */
class ReferenceEvent : public QEvent
{
public:

	/// Types of events generated by RefTarget objects.
	enum ReferenceEventType {

		/// This event is generated by a reference target when it has changed in some way.
		TargetChanged = QEvent::User + 1,

		/// This notification event is generated by a reference target if has been deleted.
		/// This event is automatically handled by the RefMaker class.
		TargetDeleted,

		/// This event is generated by a RefMaker when one of its reference fields changed.
		ReferenceFieldChanged,

		/// This event is generated by a RefMaker when a new reference has been added to one of its list reference fields.
		ReferenceFieldAdded,

		/// This event is generated by a RefMaker when a reference has been removed from one of its list reference fields.
		ReferenceFieldRemoved,

		/// This event is generated by a RefMaker when one of its property fields has changed.
		PropertyFieldChanged,
	};

public:

	/// \brief Constructs the message.
	/// \param type Identifies the type of the notification message.
	/// \param sender The object that generated the event.
	ReferenceEvent(ReferenceEventType type, RefTarget* sender) : QEvent(type), _sender(sender) {}

	/// \brief Returns the RefTarget that has generated this message.
	/// \return The sender of this notification message.
	RefTarget* sender() const { return _sender; }

private:

	/// The RefTarget object that has generated the event.
	RefTarget* _sender;
};

/**
 * \brief This type of event is generated by a RefMaker when the pointer stored in one of its reference
 *        fields has been replaced, removed or added.
 */
class ReferenceFieldEvent : public ReferenceEvent
{
public:

	/// Constructor.
	ReferenceFieldEvent(ReferenceEvent::ReferenceEventType type, RefTarget* sender, const PropertyFieldDescriptor& field, RefTarget* oldTarget, RefTarget* newTarget, int index = -1) :
		ReferenceEvent(type, sender), _field(field), _oldvalue(oldTarget), _newvalue(newTarget), _index(index) {}

	/// \brief Returns the reference field that has changed.
	/// \return The descriptor of the changed reference field in the RefTarget that
	///         has generated the message.
	const PropertyFieldDescriptor& field() const { return _field; }

	/// \brief Returns the old target that was stored in the reference field.
	RefTarget* oldTarget() const { return _oldvalue; }

	/// \brief Returns the new target that is now stored in the reference field.
	RefTarget* newTarget() const { return _newvalue; }

	/// \brief The index that has been added or removed if the changed reference field is a vector field.
	/// \return The index into the VectorReferenceField where the entry has been added or removed.
	///         Returns -1 if the reference field is not a vector reference field.
	int index() const { return _index; }

private:

	const PropertyFieldDescriptor& _field;
	RefTarget* _oldvalue;
	RefTarget* _newvalue;
	int _index;
};


/**
 * \brief This type of event is generated by a RefMaker when the value of one of its property
 *        fields changes.
 */
class PropertyFieldEvent : public ReferenceEvent
{
public:

	/// Constructor.
	PropertyFieldEvent(ReferenceEvent::ReferenceEventType type, RefTarget* sender, const PropertyFieldDescriptor& field) :
		ReferenceEvent(type, sender), _field(field) {}

	/// \brief Returns the property field that has changed.
	/// \return The descriptor of the changed property field in the RefTarget that
	///         has generated the message.
	const PropertyFieldDescriptor& field() const { return _field; }

private:

	const PropertyFieldDescriptor& _field;
};

};

#endif // __OVITO_REFERENCE_EVENT_H
