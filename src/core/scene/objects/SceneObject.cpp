///////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (2013) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#include <core/Core.h>
#include <core/scene/objects/SceneObject.h>
#include <core/scene/ObjectNode.h>
#include <core/scene/pipeline/PipelineObject.h>
#include <core/gui/mainwin/MainWindow.h>
#include <core/gui/app/Application.h>

namespace Ovito {

IMPLEMENT_SERIALIZABLE_OVITO_OBJECT(Core, SceneObject, RefTarget);
DEFINE_PROPERTY_FIELD(SceneObject, _saveWithScene, "SaveWithScene");
DEFINE_VECTOR_REFERENCE_FIELD(SceneObject, _displayObjects, "DisplayObjects", DisplayObject);
SET_PROPERTY_FIELD_LABEL(SceneObject, _saveWithScene, "Save data with scene");
SET_PROPERTY_FIELD_LABEL(SceneObject, _displayObjects, "Display objects");

/******************************************************************************
* Constructor.
******************************************************************************/
SceneObject::SceneObject(DataSet* dataset) : RefTarget(dataset), _revisionNumber(0), _saveWithScene(true)
{
	INIT_PROPERTY_FIELD(SceneObject::_saveWithScene);
	INIT_PROPERTY_FIELD(SceneObject::_displayObjects);
}

/******************************************************************************
* Sends an event to all dependents of this RefTarget.
******************************************************************************/
void SceneObject::notifyDependents(ReferenceEvent& event)
{
	// Automatically increment revision counter each time the object changes.
	if(event.type() == ReferenceEvent::TargetChanged)
		_revisionNumber++;

	RefTarget::notifyDependents(event);
}

/******************************************************************************
* Handles reference events sent by reference targets of this object.
******************************************************************************/
bool SceneObject::referenceEvent(RefTarget* source, ReferenceEvent* event)
{
	if(event->type() == ReferenceEvent::TargetChanged) {

		// Do not propagate messages generated by the display objects.
		if(displayObjects().contains(static_cast<DisplayObject*>(source)))
			return false;

		// Automatically increment revision counter each time a sub-object of this object changes.
		_revisionNumber++;
	}

	return RefTarget::referenceEvent(source, event);
}

/******************************************************************************
* Saves the class' contents to the given stream.
******************************************************************************/
void SceneObject::saveToStream(ObjectSaveStream& stream)
{
	RefTarget::saveToStream(stream);
	stream.beginChunk(0x02);
	stream.endChunk();
}

/******************************************************************************
* Loads the class' contents from the given stream.
******************************************************************************/
void SceneObject::loadFromStream(ObjectLoadStream& stream)
{
	RefTarget::loadFromStream(stream);
	int formatVersion = stream.expectChunkRange(0, 0x02);
	if(formatVersion == 0x01) {
		OORef<DisplayObject> displayObject = stream.loadObject<DisplayObject>();
		if(displayObject) {
			_displayObjects.clear();
			addDisplayObject(displayObject);
		}
	}
	stream.closeChunk();
}

/******************************************************************************
* Returns a list of object nodes that have this object as a data source.
******************************************************************************/
QSet<ObjectNode*> SceneObject::dependentNodes() const
{
	QSet<ObjectNode*> nodeList;
	for(RefMaker* dependent : this->dependents()) {
		if(ObjectNode* node = dynamic_object_cast<ObjectNode>(dependent)) {
			if(node->dataProvider() == this)
				nodeList.insert(node);
		}
		else if(PipelineObject* pipeline = dynamic_object_cast<PipelineObject>(dependent)) {
			if(pipeline->sourceObject() == this)
				nodeList.unite(pipeline->dependentNodes());
		}
	}
	return nodeList;
}

/******************************************************************************
* This function blocks execution until the object is able ready to
* provide data via its evaluate() function.
******************************************************************************/
bool SceneObject::waitUntilReady(TimePoint time, const QString& message, QProgressDialog* progressDialog)
{
	OVITO_ASSERT_MSG(QThread::currentThread() == QApplication::instance()->thread(), "SceneObject::waitUntilReady", "This function may only be called from the GUI thread.");

	// Check if data is already available.
	if(evaluate(time).status().type() != PipelineStatus::Pending)
		return true;

	if(Application::instance().guiMode()) {

		// Show a modal progress dialog to block user interface while waiting for the scene to become ready.
		if(!progressDialog) {
			QProgressDialog pdlg(dataset()->mainWindow());
			pdlg.setWindowModality(Qt::WindowModal);
			pdlg.setAutoClose(false);
			pdlg.setAutoReset(false);
			pdlg.setMinimumDuration(0);
			pdlg.setValue(0);
			pdlg.setLabelText(message);

			// Poll object until it becomes ready.
			while(evaluate(time).status().type() == PipelineStatus::Pending) {
				if(pdlg.wasCanceled())
					return false;
				QCoreApplication::processEvents(QEventLoop::WaitForMoreEvents, 50);
			}

		}
		else {
			progressDialog->setLabelText(message);

			// Poll object until it becomes ready.
			while(evaluate(time).status().type() == PipelineStatus::Pending) {
				if(progressDialog->wasCanceled())
					return false;
				QCoreApplication::processEvents(QEventLoop::WaitForMoreEvents, 50);
			}
		}
	}
	else {
		// Poll object until it becomes ready.
		while(evaluate(time).status().type() == PipelineStatus::Pending) {
			QCoreApplication::processEvents(QEventLoop::WaitForMoreEvents, 50);
		}
	}

	return true;
}

};
