///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (2019) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once


#include <ovito/pyscript/PyScript.h>
#include <ovito/pyscript/engine/ScriptEngine.h>
#include <ovito/core/viewport/overlays/ViewportOverlay.h>
#include <ovito/core/dataset/DataSet.h>
#include <ovito/core/dataset/animation/AnimationSettings.h>
#include <boost/optional.hpp>

namespace PyScript {

using namespace Ovito;

/**
 * \brief A viewport overlay that runs a Python script which paints into the viewport.
 */
class OVITO_PYSCRIPT_EXPORT PythonViewportOverlay : public ViewportOverlay
{
	Q_OBJECT
	OVITO_CLASS(PythonViewportOverlay)
	Q_CLASSINFO("DisplayName", "Python script");

public:

	/// \brief Constructor.
	Q_INVOKABLE PythonViewportOverlay(DataSet* dataset);

	/// This method asks the overlay to paint its contents over the rendered image.
	virtual void render(const Viewport* viewport, TimePoint time, FrameBuffer* frameBuffer, const ViewProjectionParameters& projParams, const RenderSettings* renderSettings, AsyncOperation& operation) override;

	/// This method asks the overlay to paint its contents over the given interactive viewport.
	virtual void renderInteractive(const Viewport* viewport, TimePoint time, QPainter& painter, const ViewProjectionParameters& projParams, const RenderSettings* renderSettings, AsyncOperation& operation) override;

	/// Returns the log output generated by the script during the compilation phase.
	const QString& scriptCompilationOutput() const { return _scriptCompilationOutput; }

	/// Returns the log output generated by the script during the rendering phase.
	const QString& scriptRenderingOutput() const { return _scriptRenderingOutput; }

	/// Returns the Python script function executed by the overlay.
	py::object scriptFunction() {
		if(_scriptCompilationFuture.isValid())
			return _scriptCompilationFuture.result();
		else
			return py::none();
	}

	/// Sets the Python script function to be executed by the overlay.
	void setScriptFunction(py::function func) {
		_scriptCompilationFuture = SharedFuture<py::function>(std::move(func));
		notifyTargetChanged();
	}

	/// Loads the default values of this object's parameter fields.
	virtual void loadUserDefaults() override;

protected:

	/// Is called when the value of a property of this object has changed.
	virtual void propertyChanged(const PropertyFieldDescriptor& field) override;

	/// Compiles the script code entered by the user.
	SharedFuture<py::function> compileScriptFunction();

private Q_SLOTS:

	/// Is called whenever the script generates some output during the compilation phase.
	void appendCompilationOutput(const QString& text);

	/// Is called whenever the script generates some output during the rendering phase.
	void appendRenderingOutput(const QString& text);

private:

	/// The Python script source code.
	DECLARE_MODIFIABLE_PROPERTY_FIELD(QString, script, setScript);

	/// A future returning the compiled script function.
	SharedFuture<py::function> _scriptCompilationFuture;

	/// The captured log output of the script compilation step, which is displayed in the graphical user interface.
	QString _scriptCompilationOutput;

	/// The captured log output of the script execution, which is displayed in the graphical user interface.
	QString _scriptRenderingOutput;
};

/**
 * Helper class that serves as a way to pass information to user-defined overlay functions.
 */
class OVITO_PYSCRIPT_EXPORT ViewportOverlayArguments
{
public:

	/// Constructor.
	ViewportOverlayArguments(TimePoint time, const Viewport* viewport, const ViewProjectionParameters& projParams,
		const RenderSettings* renderSettings, py::object pypainter, QPainter& painter) :
			_time(time),
			_viewport(viewport),
			_projParams(projParams),
			_renderSettings(renderSettings),
			_pypainter(std::move(pypainter)),
			_painter(painter) {}

	/// Returns the animation time of the frame being rendered.
	TimePoint time() const { return _time; }

	/// Returns the animation frame being rendered.
	int frame() const { return renderSettings()->dataset()->animationSettings()->timeToFrame(time()); }

	/// Returns the viewport being rendered.
	const Viewport* viewport() const { return _viewport; }

	/// Returns the viewport projection information.
	const ViewProjectionParameters& projParams() const { return _projParams; }

	/// Returns the current render settings.
	const RenderSettings* renderSettings() const { return _renderSettings; }

	/// Returns the QPainter.
	QPainter& painter() { return _painter; }

	/// Returns the QPainter wrapped as a Python object.
	const py::object& pypainter() const { return _pypainter; }

	/// Projects a point from world space to window space.
	boost::optional<Point2> projectPoint(const Point3& world_pos) const;

	/// Projects a size from 3d world space to 2d window space.
	FloatType projectSize(const Point3& world_pos, FloatType radius3d) const;

private:

	/// The animation time of the frame being rendered.
	TimePoint _time;

	/// The viewport being rendered.
	const Viewport* _viewport;

	/// The viewport projection information.
	const ViewProjectionParameters& _projParams;

	/// The current render settings.
	const RenderSettings* _renderSettings;

	/// The QPainter.
	QPainter& _painter;

	/// The QPainter wrapped as a Python object.
	py::object _pypainter;
};

}	// End of namespace
