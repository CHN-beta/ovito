////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright 2019 Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify it either under the
//  terms of the GNU General Public License version 3 as published by the Free Software
//  Foundation (the "GPL") or, at your option, under the terms of the MIT License.
//  If you do not alter this notice, a recipient may use your version of this
//  file under either the GPL or the MIT License.
//
//  You should have received a copy of the GPL along with this program in a
//  file LICENSE.GPL.txt.  You should have received a copy of the MIT License along
//  with this program in a file LICENSE.MIT.txt
//
//  This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND,
//  either express or implied. See the GPL or the MIT License for the specific language
//  governing rights and limitations.
//
////////////////////////////////////////////////////////////////////////////////////////

#pragma once


#include <ovito/pyscript/PyScript.h>
#include <ovito/pyscript/engine/ScriptEngine.h>
#include <ovito/core/dataset/pipeline/Modifier.h>
#include <ovito/core/dataset/pipeline/ModifierApplication.h>

namespace PyScript {

using namespace Ovito;

class PythonScriptModifierApplication;	// defined below.

/**
 * \brief A modifier that executes a user-defined Python function.
 */
class OVITO_PYSCRIPT_EXPORT PythonScriptModifier : public Modifier
{
	Q_OBJECT
	OVITO_CLASS(PythonScriptModifier)
	Q_CLASSINFO("DisplayName", "Python script");
	Q_CLASSINFO("ModifierCategory", "Modification");

public:

	/// \brief Constructor.
	Q_INVOKABLE PythonScriptModifier(DataSet* dataset);

	/// Modifies the input data.
	virtual Future<PipelineFlowState> evaluate(TimePoint time, ModifierApplication* modApp, const PipelineFlowState& input) override;

	/// Returns the Python script function executed by the modifier.
	py::object scriptFunction() {
		if(_scriptCompilationFuture.isValid())
			return _scriptCompilationFuture.result();
		else
			return py::none();
	}

	/// Sets the Python script function to be executed by the modifier.
	void setScriptFunction(py::function func) {
		_scriptCompilationFuture = SharedFuture<py::function>(std::move(func));
		notifyTargetChanged();
	}

	/// Returns the log output generated by the script during the compilation phase.
	const QString& scriptCompilationOutput() const { return _scriptCompilationOutput; }

	/// Loads the default values of this object's parameter fields.
	virtual void loadUserDefaults() override;

protected:

	/// Is called when the value of a property of this object has changed.
	virtual void propertyChanged(const PropertyFieldDescriptor& field) override;

	/// Compiles the script code entered by the user.
	SharedFuture<py::function> compileScriptFunction();

private Q_SLOTS:

	/// Is called whenever the script generates some output during the compilation phase.
	void appendCompilationOutput(const QString& text);

private:

	/// The Python script.
	DECLARE_MODIFIABLE_PROPERTY_FIELD(QString, script, setScript);

	/// The captured log output of the script compilation step, which is displayed in the graphical user interface.
	QString _scriptCompilationOutput;

	/// A future returning the compiled script function.
	SharedFuture<py::function> _scriptCompilationFuture;
};

/**
 * \brief The type of ModifierApplication create for a PythonScriptModifier
 *        when it is inserted into in a data pipeline.
 */
class OVITO_PYSCRIPT_EXPORT PythonScriptModifierApplication : public ModifierApplication
{
	Q_OBJECT
	OVITO_CLASS(PythonScriptModifierApplication)

public:

	/// Constructor.
	Q_INVOKABLE PythonScriptModifierApplication(DataSet* dataset) : ModifierApplication(dataset) {}

	/// Returns the log output generated by the script during modifier evaluation.
	const QString& logOutput() const { return _scriptLogOutput; }

	/// Clears the log buffer.
	void clearLogOutput() { _scriptLogOutput.clear(); }

	/// Appends text output generated by the running script to the logging buffer.
	Q_INVOKABLE void appendLogOutput(const QString& text);

private:

	/// The captured log output of the script execution, which is displayed in the graphical user interface.
	QString _scriptLogOutput;
};

}	// End of namespace
