///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (2018) Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  OVITO is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once


#include <gui/GUI.h>
#include <core/oo/RefTarget.h>
#include <core/oo/RefTargetListener.h>
#include "OverlayListItem.h"

namespace Ovito { OVITO_BEGIN_INLINE_NAMESPACE(Gui) OVITO_BEGIN_INLINE_NAMESPACE(Internal)

/**
 * A Qt model class used to populate the QListView widget on the viewports overlay page of the command panel.
 */
class OverlayListModel : public QAbstractListModel
{
	Q_OBJECT

public:

	/// Constructor.
	OverlayListModel(QObject* parent);

	/// Returns the number of list items.
	virtual int rowCount(const QModelIndex& parent = QModelIndex()) const override { return _items.size(); }

	/// Returns the data associated with a list entry.
	virtual QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const override;

	/// Changes the data associated with a list entry.
	virtual bool setData(const QModelIndex& index, const QVariant& value, int role = Qt::EditRole) override;

	/// Returns the flags for an item.
	virtual Qt::ItemFlags flags(const QModelIndex& index) const override;

	/// Returns the associated selection model.
	QItemSelectionModel* selectionModel() const { return _selectionModel; }

	/// Returns the currently selected model item in list.
	OverlayListItem* selectedItem() const;

	/// Returns the currently selected index in the overlay list.
	int selectedIndex() const;

	/// Returns an item from the list model.
	OverlayListItem* item(int index) const {
		OVITO_ASSERT(index >= 0 && index < _items.size());
		return _items[index];
	}

	/// Populates the model with the given list items.
	void setItems(const QList<OORef<OverlayListItem>>& newItems);

	/// Returns the list of items.
	const QList<OORef<OverlayListItem>>& items() const { return _items; }

	/// The currently selected viewport whose overlays are mirrored by this list model.
	Viewport* selectedViewport() const { return _selectedViewport.target(); }

	/// Sets the currently selected viewport whose overlays should be mirrored by this list model.
	void setSelectedViewport(Viewport* viewport) { 
		_selectedViewport.setTarget(viewport); 
		refreshList();
	}

	/// Sets the overlay that should be selected on the next list update.
	void setNextToSelectObject(ViewportOverlay* obj) { _nextObjectToSelect = obj; }

Q_SIGNALS:

	/// This signal is emitted if a new list item has been selected, or if the currently
	/// selected item has changed.
	void selectedItemChanged();

public Q_SLOTS:

	/// Rebuilds the viewport overlay list.
	void refreshList();

	/// Updates the appearance of a single list item.
	void refreshItem(OverlayListItem* item);

private Q_SLOTS:

	/// Handles notification events generated by the selected viewport.
	void onViewportEvent(const ReferenceEvent& event);

private:

	/// List of visible items in the model.
	QList<OORef<OverlayListItem>> _items;

	/// Holds reference to the currently selected Viewport.
	RefTargetListener<Viewport> _selectedViewport;

	/// The item in the list that should be selected on the next list update.
	ViewportOverlay* _nextObjectToSelect = nullptr;

	/// The selection model of the list view widget.
	QItemSelectionModel* _selectionModel;

	// Status icons:
	QPixmap _statusInfoIcon;
	QPixmap _statusWarningIcon;
	QPixmap _statusErrorIcon;
	QPixmap _statusNoneIcon;
};

OVITO_END_INLINE_NAMESPACE
OVITO_END_INLINE_NAMESPACE
}	// End of namespace
