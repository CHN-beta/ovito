<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="viz.modifiers.compute_property"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Compute property</title>

  <para>
  
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/modifiers/compute_property_panel.png" format="PNG" />
    </imageobject></mediaobject></screenshot></informalfigure>
  
  This modifier evaluates a user-defined mathematical expression for every particle 
  and stores the results in a particle property. The modifier
  can be used to assign new properties to a particle, or to overwrite the
  values stored in an existing particle property.</para>

  <para>The entered math formula can contain references to existing per-particle
  properties such the position or type. The list of variables
  that may be referenced in the formula is displayed in the second
  panel. Variable and function names are case-sensitive.</para>

  <simplesect>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>Output property</term>
        <listitem>
          <para>Specifies the target property that should be written by the modifier. 
          You can either generate a new <emphasis>custom</emphasis> property or pick one of the <link
          linkend="usage.particle_properties">predefined standard properties</link>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Name</term>
        <listitem>
          <para>The name of the user-defined property to generate.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Data type</term>
        <listitem>
          <para>The data type of the user-defined property to generate (floating-point or integer numbers).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Number of components</term>
        <listitem>
          <para>The number of vector components of the user-defined property. 
          This allows you to create properties that store more than one value per particle.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Compute only for selected particles</term>
        <listitem>
          <para>Controls whether the math formula is only evaluated for
          selected particles. This option is useful if you want to avoid overwriting
          existing property values for certain particles.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Expressions</term>
        <listitem>
          <para>The panel contains one input field for every vector component
          of the property to be computed. You must enter a mathematical
          expression in each field that will be evaluated for every
          particle. The expression syntax supported by the modifier is very
          similar to the C language syntax. Arithmetic expressions can be created from
          float literals, variables or functions using the following operators
          in the given order of precedence: 
          <informaltable>
          <tgroup cols="2">
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
              <tbody>
                <row>
                  <entry>(...)</entry>

                  <entry>expressions in parentheses are evaluated first</entry>
                </row>

                <row>
                  <entry>A^B</entry>

                  <entry>exponentiation (A raised to the power B)</entry>
                </row>

                <row>
                  <entry>A*B, A/B</entry>

                  <entry>multiplication and division</entry>
                </row>

                <row>
                  <entry>A+B, A-B</entry>

                  <entry>addition and subtraction</entry>
                </row>

                <row>
                  <entry>A==B, A!=B, A&lt;B, A&lt;=B, A&gt;B, A&gt;=B</entry>

                  <entry>comparison between A and B (result is either 0 or
                  1)</entry>
                </row>

                <row>
                  <entry>A &amp;&amp; B</entry>

                  <entry>logical AND operator: result is 1 if A and B differ from
                  0, else 0</entry>
                </row>

                <row>
                  <entry>A || B</entry>

                  <entry>logical OR operator: result is 1 if A or B differ from
                  0, else 0</entry>
                </row>
                
                <row>
                  <entry>A ? B : C</entry>
                  <entry>If A differs from 0 (i.e. is true), the resulting value of this expression
                  is B, else C.</entry>
                </row>
                
              </tbody></tgroup>
            </informaltable></para>

          <para>The expression parser supports the following functions:
          <informaltable>
          <tgroup cols="2">
          <thead>
            <row>
              <entry>Function name</entry>
              <entry>Description</entry>
            </row>
          </thead>
              <tbody>
                <row>
                  <entry>abs(A)</entry>

                  <entry>Absolute value of A. If A is negative, returns -A
                  otherwise returns A.</entry>
                </row>

                <row>
                  <entry>acos(A)</entry>

                  <entry>Arc-cosine of A. Returns the angle, measured in radians,
                  whose cosine is A.</entry>
                </row>

                <row>
                  <entry>acosh(A)</entry>

                  <entry>Same as acos() but for hyperbolic cosine.</entry>
                </row>

                <row>
                  <entry>asin(A)</entry>

                  <entry>Arc-sine of A. Returns the angle, measured in radians,
                  whose sine is A.</entry>
                </row>

                <row>
                  <entry>asinh(A)</entry>

                  <entry>Same as asin() but for hyperbolic sine.</entry>
                </row>

                <row>
                  <entry>atan(A)</entry>

                  <entry>Arc-tangent of A. Returns the angle, measured in
                  radians, whose tangent is A.</entry>
                </row>

                <row>
                  <entry>atan2(Y,X)</entry>

                  <entry>Two argument variant of the arctangent function. Returns
                  the angle, measured in radians. This function is documented
                  <link
                  xlink:href="http://en.wikipedia.org/wiki/Atan2">here</link>.</entry>
                </row>

                <row>
                  <entry>atanh(A)</entry>

                  <entry>Same as atan() but for hyperbolic tangent.</entry>
                </row>

                <row>
                  <entry>avg(A,B,...)</entry>

                  <entry>Returns the average of all arguments.</entry>
                </row>

                <row>
                  <entry>cos(A)</entry>

                  <entry>Cosine of A. Returns the cosine of the angle A, where A
                  is measured in radians.</entry>
                </row>

                <row>
                  <entry>cosh(A)</entry>

                  <entry>Same as cos() but for hyperbolic cosine.</entry>
                </row>

                <row>
                  <entry>exp(A)</entry>

                  <entry>Exponential of A. Returns the value of e raised to the
                  power A where e is the base of the natural logarithm, i.e.
                  the non-repeating value approximately equal to
                  2.71828182846.</entry>
                </row>

                <row>
                  <entry>rint(A)</entry>

                  <entry>Rounds A to the closest integer. 0.5 is rounded to
                  1.</entry>
                </row>

                <row>
                  <entry>ln(A)</entry>

                  <entry>Natural (base e) logarithm of A.</entry>
                </row>

                <row>
                  <entry>log10(A)</entry>

                  <entry>Base 10 logarithm of A.</entry>
                </row>

                <row>
                  <entry>log2(A)</entry>

                  <entry>Base 2 logarithm of A.</entry>
                </row>

                <row>
                  <entry>max(A,B,...)</entry>

                  <entry>Returns the maximum of all values.</entry>
                </row>

                <row>
                  <entry>min(A,B,...)</entry>

                  <entry>Returns the minimum of all values.</entry>
                </row>

                <row>
                  <entry>sin(A)</entry>

                  <entry>Sine of A. Returns the sine of the angle A, where A is
                  measured in radians.</entry>
                </row>

                <row>
                  <entry>sinh(A)</entry>

                  <entry>Same as sin() but for hyperbolic sine.</entry>
                </row>

                <row>
                  <entry>sqrt(A)</entry>

                  <entry>Square root of a value.</entry>
                </row>

                <row>
                  <entry>tan(A)</entry>

                  <entry>Tangent of A. Returns the tangent of the angle A, where
                  A is measured in radians.</entry>
                </row>
              </tbody></tgroup>
            </informaltable></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </simplesect>

  <simplesect>
    <title>Example 1</title>
    <para>In the first example, we compute the linear velocity of each
    particle based on the components v<subscript>x</subscript>,
    v<subscript>y</subscript>, and v<subscript>z</subscript> of their velocity
    vectors. For this, we create a new user-defined property with the name "Linear
    Velocity". The following
    formula needs to be entered into the expression field: <programlisting>sqrt(Velocity.X^2 + Velocity.Y^2 + Velocity.Z^2)</programlisting>
    Here we referenced the X, Y, and Z components of the standard
    <literal>Velocity</literal> particle property, which must be present in the
    input data set. The computed linear velocity property can 
    subsequently be used to color particle with the <emphasis><link
    linkend="viz.modifiers.color_coding">Color Coding</link></emphasis>
    modifier.</para>
  </simplesect>

  <simplesect>
    <title>Example 2</title>
    <para>The <emphasis>Compute property</emphasis> modifier can be used to set
    particle properties which are not accessible by other means. One such example is
    the per-particle radius: Let us assume we have selected a subset of particles
    which we want to display with a different size than the others.
    To this end, we use the <emphasis>Compute property</emphasis> modifier to control
    the value of the <literal>Radius</literal> particle property, which stores the
    per-particle display radii. The selection state of particles is stored in the
    <literal>Selection</literal> property. Using the
    formula <programlisting>Selection ? 1.4 : 1.0</programlisting> we can assign a
    radius that depends on the selection state of each particle, which can be either 1 or 0. 
    That is, the above radius expression will evaluate to 1.4 for selected particles, and to 1.0 for unselected
    particles.
    </para>
    <para>
    Alternatively, we can simply enter the constant expression <literal>1.4</literal> and 
    activate the <emphasis>Compute only for selected particles</emphasis> option to achieve the same result 
    (given that all particles already have a radius of 1.0 before applying the modifier).
    
    </para>
  </simplesect>
</section>
