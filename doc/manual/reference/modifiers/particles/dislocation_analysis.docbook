<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="particles.modifiers.dislocation_analysis"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Dislocation analysis (DXA)</title>

  <para>
  
    <informalfigure>
      <informaltable frame="none">
        <tgroup cols="2">
          <tbody>
            <row valign="bottom">
              <entry>Input:</entry>
              <entry>Output:</entry>
            </row>
            <row valign="top">
              <entry>
		        <mediaobject><imageobject>
		        <imagedata fileref="images/modifiers/dislocation_analysis_example_input.png" format="PNG" />
		        </imageobject></mediaobject>
              </entry>
              <entry>
		        <mediaobject><imageobject>
		        <imagedata fileref="images/modifiers/dislocation_analysis_example_output.png" format="PNG" />
		        </imageobject></mediaobject>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </informalfigure>
      
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/modifiers/dislocation_analysis_panel.png" format="PNG" />
    </imageobject></mediaobject></screenshot></informalfigure>
    
    This analysis modifier identifies all dislocations in a crystal, determines their Burgers vectors, 
    and outputs a line representation of the dislocation defects. The modifier implements the so-called
    Dislocation Extraction Algorithm (DXA), a unique computational method developed by the author of OVITO.
    The original DXA method has been described in the paper
    <blockquote><para>
<literallayout><link xlink:href="http://iopscience.iop.org/0965-0393/18/8/085001/">A. Stukowski and K. Albe.
Modelling Simul. Mater. Sci. Eng. 18, 085001 (2010)</link></literallayout>
    </para></blockquote>
    The current implementation in OVITO follows a newer, more general approach, which has been described in 
    a follow-up paper:
    <blockquote><para>
<literallayout><link xlink:href="http://iopscience.iop.org/0965-0393/20/8/085007/">A. Stukowski, V.V. Bulatov and A. Arsenlis.
Modelling Simul. Mater. Sci. Eng. 20, 085007 (2012)</link></literallayout>
    </para></blockquote>
    Please cite the latter reference if you publish results obtained with the dislocation analysis modifier.
  </para>

  <para>
    The DXA transforms the original atomistic representation of a dislocated crystal into a line-based representation 
    of the dislocation network. It is able to compute the true Burgers vector of dislocation segments 
    and identify dislocation junctions. The algorithm can find partial dislocations and also
    certain secondary grain boundary dislocations (e.g. twinning dislocations).
  </para>
  
  <note><title>Important notice</title>
  <para>
    Even though the implementation of the DXA in OVITO is highly optimized, the algorithm is computationally
    expensive and requires considerable working memory. The minimum requirement is 1 kilobyte per input atom!
    Thus, to analyze a dataset containing 1 million atoms, at least 1 GB of free memory must be available. 
    Otherwise your operating system may start swapping data to disk and your computer becomes unresponsive.
    Depending on the number of crystal defects, even more memory may be needed. For analyzing very large MD datasets that would exceed the available 
    memory an MPI-based parallel implementation of the DXA is available which runs on distributed computing clusters. 
    Please contact the author for more information on this standalone analysis code.
  </para>
  </note>

   <simplesect>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>Input crystal type</term>
        <listitem>
          <para>This parameter specifies the lattice type of the input crystal. Currently, simple crystal stuctures such as
          FCC, HCP, BCC, and diamond are supported. The DXA ignores the chemical atom types. Thus,
          a zinc blende structure can simply be treated as cubic diamond and wurtzite as hexagonal diamond.
          </para>
          <para>
          The selected input crystal type tells OVITO how to identify the local coordination structure of
          each atom and how to compute the local crystal orientation. The selected crystal type also determines 
          how the computed Burgers vectors are represented (three-component notation for crystals with cubic symmetry,
          four-component notation for hexagonal symmetry).
          </para>
          <para>
          Furthermore, for each available crystal type, OVITO defines a set of dislocation classes into which the
          extracted dislocation lines are grouped. Dislocations with a Burgers vector that does not belong to any of the 
          predefined families are assigned to the category "Other". Currently, the list of dislocation classes is hardcoded
          and cannot be changed by the user. Please contact the developer if you think that a new dislocation class should be 
          added to a crystal type.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Trial circuit length</term>
        <listitem>
          <para>This sets the maximum length of trial Burgers circuits, which are constructed
          by the DXA to discover dislocations in the crystal. The maximum circuit length is specified
          in terms of the number of atom-to-atom steps. Dislocations whose core is too wide to be enclosed
          by a circuit of the given maximum length will not be found by the algorithm. 
          </para>
          <para>
          The default value for this parameter is 9, which is sufficient to discover all typical lattice dislocations
          in the types of crystals supported by the modifier. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Circuit stretchability</term>
        <listitem>
          <para>Once the DXA has discovered a dislocation segment and constructed a Burgers circuit around its dislocation core, the algorithm
          advances the circuit along the dislocation to generate a line presentation of the segment.
          The thickness of the core may vary along the dislocation (e.g. it becomes wider close to a dislocation junction).
          This is why the circuit has a certain amount of elasticity, which is set by the stretchability parameter.
          A value of 6 (the default), for example, allows the circuit to expand to a length that is 
          six steps longer than the limit set by the <emphasis>trial circuit length</emphasis> parameter above.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Output interface mesh</term>
        <listitem>
          <para>Tells the analysis modifier to display the so-called interface mesh, a closed manifold which separates 
          the good crystal region from the bad crystal region. This is a geometric structure
          computed internally by the algorithm, which is normally not of interest. In other words this option is only for debugging purposes
          and allows to follow the intermediate stages of the algorithm.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Line smoothing level</term>
        <listitem>
          <para>The raw dislocation lines generated by the DXA are typically noisy (due to the atomistic nature of the dislocation cores)
          and need to be post-processed to produce smooth dislocation curves. This parameter controls the number of
          iterations of the smoothing algorithm to perform.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Line point separation</term>
        <listitem>
          <para>The raw dislocation lines generated by the DXA consist of a very dense sequence of points.
          To produce smooth lines, the number of points is reduced in a post-processing step. This parameter controls
          the desired distance between successive points along a dislocation line. The distance is only an approximate number
          and is measured in multiples of the interatomic spacing in the underlying crystal.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Surface smoothing level</term>
        <listitem>
          <para>The raw defect mesh generated by the DXA contains atomically sharp steps and needs to be 
          post-processed to produce a smooth surface. This parameter controls the number of
          iterations of the smoothing algorithm to perform.
          </para>
        </listitem>
      </varlistentry>
	</variablelist>
    </simplesect>

    <simplesect>
    <title>Outputs</title>
    <para>
       After analyzing the atomistic input crystal, the modifier produces serveral pieces of output: 
       <variablelist>
          <varlistentry>
          <term>Dislocation lines</term>
          <listitem>
          <para>The dislocation segments identified by the DXA are output as continuous lines. Each dislocation segment 
                has a starting point and an endpoint. The two define the orientation of the dislocation line (the <emphasis>line sense</emphasis>).
                Each end may be part of a <emphasis>junction</emphasis>, where it is connected to 
                other dislocation segments, or it may be a <emphasis>dangling</emphasis> end. Dislocations that merge into a crystal's surface
                or into other extended defects have dangling ends. If a dislocation is a loop, its starting point forms a 2-junction with its endpoint. 
                Dislocation loops need not be loop-shaped; they can also be infinite lines, going through a periodic boundary of the simulation cell.
          </para>
          <para>
                In addition to this geometric information, each dislocation segment has two additional properties: The ID of the crystallite cluster
                it is embedded in (see below) and its Burgers vector. The Burgers vector computed for a segment is its <emphasis>true</emphasis> Burgers vector, i.e.
                a vector in the ideal reference crystal frame.
          </para>
          </listitem>
          </varlistentry>
          
          <varlistentry>
          <term>Defect mesh</term>
          <listitem>
          <para>As part of the dislocation identification process, the DXA divides the input crystal into 
                a so-called <emphasis>good</emphasis> and a <emphasis>bad</emphasis> region. Within the good crystal region the algorithm was able to 
                map atoms to a perfect reference state. This part of space includes atoms that are in a perfect crystalline
                environment (which may be subject to slight elastic distortions), stacking faults, and coherent grain boundaries. The bad crystal region,
                in contrast, comprises those parts where the atomic arrangement does not resemble a perfect crystal (or any of the planar defects mentioned above).
                The cores of dislocations belong to the bad crystal region as well as other, unidentified defects, the outer surfaces, and 
                voids within the crystal.
          </para>
          <para>
                The DXA constructs the dividing surface which separates the good from the bad crystal region. This <emphasis>interface mesh</emphasis> is a two-dimensional manifold 
                that encloses the dislocation cores and all other defects in the crystal (except stacking faults and certain grain boundaries, which have been classified as 
                being part of the good region). This intermediate geometric data structure allows the DXA to effectively find dislocation lines by applying the Burgers circuit
                construction. Those parts of the interface mesh which are associated with dislocations will subsequently be removed. The remaining parts, which enclose non-dislocation
                defects, form the so-called <emphasis>defect mesh</emphasis>. It is a triangulated mesh, which is output by the DXA analysis modifier, and which represents 
                the bad crystal regions that have not been classified as dislocations.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term>Atomic structure types</term>
          <listitem>
          <para>As part of the DXA a structure identification is performed, in which the local environment of each atom is analyzed to identify
                atoms that form a perfect crystal lattice. This information is output by the modifier as a new particle property
                named <literal>Structure type</literal>. The atomic structure identification is based on the common neighbor analysis method,
                and the results are very similar to what you would get by applying the <link linkend="particles.modifiers.common_neighbor_analysis">Common Neighbor Analysis</link> 
                or the <link linkend="particles.modifiers.identify_diamond_structure">Identify Diamond Structure</link> modifier.
          </para>
          <para>
                Note that the list of structure types the algorithm looks for depends on the selected input crystal type. For example, if the selected input crystal type
                is "FCC", then the DXA will only look for atoms in FCC and HCP arrangements. The latter form stacking faults and coherent twin boundaries and
                are therefore important for the identification of partial dislocations in the FCC lattice.                
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term>Atomic clusters</term>
          <listitem>
          <para>After the atomic structure identification step is completed, the DXA combines atoms into clusters. A cluster is a contiguous crystallite consisting of atoms 
                of the same structural type (e.g. "FCC"). Atoms that are part of an FCC stacking fault, for instance, are grouped into an HCP cluster. 
                Another example: An FCC bicrystal with a coherent twin boundary gets divided into three clusters: Two FCC clusters for the grains and one HCP cluster that comprises the 
                atoms of the boundary core. 
          </para>
          <para>
                Each cluster created by the algorithm has a unique ID (a positive integer), and the modifier outputs the assignments of atoms to clusters as 
                a new particle property named <literal>Cluster</literal>, containing the ID of the cluster the atom belongs to.
                Atoms with an undentified coordination structure are not part of any cluster, which is indicated by the special value 0.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term>Cluster graph</term>
          <listitem>
          <para>The atomic clusters form an abstract adjacency graph, which is built up by the algorithm. 
                For example, a bicrystal with two grains separated by a grain boundary can be described 
                in terms of a graph with three nodes (the three atomic clusters) and two edges connecting both grains with the grain boundary cluster.
                Each cluster establishes a local lattice coordinate system, and the true Burgers vector computed by the DXA for a dislocation
                embedded in a crystal cluster is expressed in this coordinate frame.
                A graph edge connecting two adjacent cluster carries information about their crystallographic orientation relationship. 
                This orientation relationship, which is described in terms of a transformation matrix, can be used to rotate 
                vectors from the lattice coordinate frame of one grain to other grain. Ultimately, this abstract description of a polycrystalline
                microstructure enables the identification of dislocations (which can involve Burgers circuits that cross grain boundaries and stacking faults).
          </para>
          <para>
                Even though the cluster graph is generated by the DXA modifier as an intermediate data structure, OVITO currently provides no means for the user to work
                with or visualize this output data. Future versions of the program may come with a user interface that allows to inspect the generated cluster graph.
          </para>
          </listitem>
          </varlistentry>
          
       </variablelist>
    </para>
    <para>
        You can place the mouse cursor over a dislocation segment to let OVITO display its properties in the status bar at the bottom of the main window.
    </para>
  </simplesect> 
       
</section>
