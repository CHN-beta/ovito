<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="particles.modifiers.freeze_property"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Freeze property</title>

  <para>
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/modifiers/freeze_property_panel.png" format="PNG" />
    </imageobject></mediaobject></screenshot></informalfigure>  
    This modifier takes a snapshot of the current state of a per-particle property. It subsequently
    writes the stored values back to the selected particle property, overwriting any existing 
    (time-dependent) values. Thus, this modifier can be used to freeze a particle property that, otherwise, is changing with 
    simulation time.
  </para>
  
  <para>
    The modifier automatically takes a snapshot of the current state whenever the user selects a new source property for the modifier.
    The snapshot is always taken at the current animation time. You can explicitly take a new snapshot by clicking the
    <guibutton>Take new snapshot</guibutton> button.
  </para>
  
  <para>
     By default, the property values saved by the modifier are written back to the same property from which the snapshot 
     was taken, overwriting the current values. If you want to preserve the current values, you can let the modifier
     write the stored snapshot to a new property by entering a different name into the <emphasis>Output property</emphasis> field.
     Then you will be able to access both the current values and the ones from the snapshot.
  </para>
  
  <simplesect>
    <title>Example 1</title>
	<para>
	<informalfigure>
      <informaltable frame="none">
        <tgroup cols="3">
          <tbody>
            <row>
              <entry>
                <para>Initial frame:
		        <mediaobject><imageobject>
		        <imagedata fileref="images/modifiers/freeze_property_example1_initial.png" format="PNG" />
		        </imageobject></mediaobject></para>
              </entry>
              <entry>
                <para>Without <emphasis>Freeze Property</emphasis> modifier:
		        <mediaobject><imageobject>
		        <imagedata fileref="images/modifiers/freeze_property_example1_without.png" format="PNG" />
		        </imageobject></mediaobject></para>
              </entry>
              <entry>
                <para>With <emphasis>Freeze Property</emphasis> modifier:
		        <mediaobject><imageobject>
		        <imagedata fileref="images/modifiers/freeze_property_example1_with.png" format="PNG" />
		        </imageobject></mediaobject></para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </informalfigure>
       The first picture shows the initial frame of a simulation sequence where the <link linkend="particles.modifiers.color_coding">Color coding</link> 
	   modifier has been used to color particles according to their X coordinate. 
	   During the simulation the solid is sheared and particles move (second picture). If we look at an individual
	   particle, its color varies with time, because its X position changes and the <emphasis>Color coding</emphasis> modifier 
	   re-assigns a new color on every simulation frame.
	</para>
	<para>
	   To suppress this dynamic updating of particle colors, we can use the <emphasis>Freeze property</emphasis> modifier. It allows the take a snapshot
	   of the particle colors in the initial frame. Subsequently, it will overwrite any new colors generated by the <emphasis>Color coding</emphasis>
	   modifier with its stored colors (third picture). Thus, the <emphasis>Freeze property</emphasis> modifier allows us
	   to "bake in" a particle property such as color so that it stays constant. 
	</para>
  </simplesect>

  
  <simplesect>
    <title>Example 2</title>
	<para>
	   The modifier is also useful if we want to compare per-particle properties that change over time with their initial
	   values at the beginning of a simulation. Let's suppose, for instance, we want to determine the amount by which 
	   the charge of each particle changes during a simulation. We assume in this example that the current particle charges 
	   have been computed by our simulation code for each simulation frame and that they are stored in 
	   the particle property "Charge". 
	</para>
	<para>
	   We can use the <emphasis>Freeze property</emphasis> modifier to take a snapshot of the initial particle charges at frame 0
	   by setting <emphasis>Property to freeze</emphasis> to "Charge". Since we don't want to overwrite the current charge values
	   with the initial ones,
	   we set the modifier's <emphasis>Output property</emphasis> to "InitialCharge". This will make the modifier write its stored values
	   to a new property named "InitialCharge".
	</para>
	<para>
	  Finally, we can use the <link linkend="particles.modifiers.compute_property">Compute property</link> modifier to compute
	  the difference between the particle properties "Charge" and "InitialCharge" at each frame of the simulation sequence.
	</para>
  </simplesect>
    
  <simplesect>
    <title>Implementation note</title>
    <para>
      This modifier requires that the number of particles does not change between frames.
    </para>
    <para>
      If available, the modifier makes use of particle identifiers to handle a changing particle order.
      That means it is okay if the storage order of particles changes between frames as long as each particle
      has a unique ID assigned that does not change over time. The modifier will correctly assign the stored 
      property values to the right particles.
    </para>
  </simplesect>  
  
</section>
