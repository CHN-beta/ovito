<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="particles.modifiers.color_coding"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Color coding</title>

  <para>
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/modifiers/color_coding_panel.png" format="PNG" scale="50" />
    </imageobject></mediaobject></screenshot></informalfigure>

    This modifier assigns colors to particles, bonds, vector glyphs, <link linkend="scene_objects.voxel_grid">voxels</link> or <link linkend="scene_objects.surface_mesh">surfaces</link> according to a selected input property.
    It thus provides a simple way of visualizing local values by means of a color scheme.
  </para>

  <para>
    The <emphasis>Operate on</emphasis> field selects the kind of data elements the modifier should color:
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Operate on</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Particles</entry>
            <entry><para>Colors particles according to a local property.</para></entry>
          </row>
          <row>
            <entry>Bonds</entry>
            <entry><para>Colors bonds according to a local bond property.</para></entry>
          </row>
          <row>
            <entry>Particle&#xA0;vectors</entry>
            <entry><para>Colors <link linkend="visual_elements.vectors">vector glyphs</link> by setting the <literal>Vector Color</literal>
              property of the associated particles.</para></entry>
          </row>
          <row>
            <entry>Voxel&#xA0;grids</entry>
            <entry><para>Colors the cells of a <link linkend="scene_objects.voxel_grid">voxel grid</link> according to a local property.</para></entry>
          </row>
          <row>
            <entry>Mesh&#xA0;faces</entry>
            <entry><para>Colors the facets of a <link linkend="scene_objects.surface_mesh">surface mesh</link> according to a local property.</para></entry>
          </row>
          <row>
            <entry>Mesh&#xA0;vertices</entry>
            <entry><para>Colors the vertices of a <link linkend="scene_objects.surface_mesh">surface mesh</link> according to a local property.</para></entry>
          </row>
          <row>
            <entry>Mesh&#xA0;regions</entry>
            <entry><para>Colors the volumetric components of a <link linkend="scene_objects.surface_mesh">surface mesh</link>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <para>
    The color getting assigned to an element (e.g. a particle) is determined by the modifier as follows:
    First, the value of the selected input property of the element is linearly mapped (and clamped) to the unit interval [0,1] according to the
    <emphasis>start value</emphasis> and <emphasis>end value</emphasis>
    parameters of the modifier. The normalized value is then mapped to an RGB color based on the selected color gradient.
  </para>

  <para>
    The <guibutton>Adjust range</guibutton> button resets the <emphasis>start value</emphasis> and
    <emphasis>end value</emphasis> parameters to the current minimum and maximum 
    of the selected input property, respectively. This ensures that no clamping of input values occurs for the current
    simulation frame. The <guibutton>Adjust range (all frames)</guibutton> button does the same but takes into account 
    the entire simulation trajectory to determine the range of input property values.
    The <guibutton>Reverse range</guibutton> button simply
    swaps the <emphasis>start value</emphasis> and <emphasis>end
    value</emphasis> parameters to effectively reverse the color scale.
  </para>

  <simplesect>
    <title>Custom color gradients</title>
    <para>
      The modifier offers a set of predefined color gradients that you can choose from. If you would like to define your
      own type of color map instead, select <guilabel>Load custom color map...</guilabel> from the gradients list box.
      The program will ask you to pick an image file on your computer containing the custom color gradient.
      You can prepare such a file using any image editing program. OVITO will use the RGB colors
      of one row of pixels of the imported image to generate the user-defined color map. Here are two examples of color gradient images:
      <screenshot><mediaobject><imageobject>
        <imagedata fileref="images/modifiers/color_coding_custom_map.png" format="PNG" />
      </imageobject></mediaobject></screenshot>
      <screenshot><mediaobject><imageobject>
        <imagedata fileref="images/modifiers/color_coding_custom_map2.png" format="PNG" />
      </imageobject></mediaobject></screenshot>
    </para>
  </simplesect>

  <simplesect>
    <title>Color legend</title>
    <para>
       If you want to include the color map of the modifier in rendered images or animations as a legend, add the
       <link linkend="viewport_layers"><guilabel>Color legend</guilabel></link> layer to the active viewport.
    </para>
  </simplesect>


  <simplesect>
    <title>Parameters</title>

    <variablelist>

      <varlistentry>
        <term>Operate on</term>
        <listitem>
          <para>Selects the kind of data elements to be colored by the modifier. Note that the modifier lets you select only from those 
          data elements that are currently present in the dataset the modifier receives as input from the data pipeline.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Property</term>
        <listitem>
          <para>The input property of the data elements to be used as basis for the coloring.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Color gradient</term>
        <listitem>
          <para>Selects the color gradient for mapping property values to colors.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Start &amp; end value</term>
        <listitem>
          <para>These parameters specify the source range of input property values getting mapped to the normalized [0,1] interval of the color map.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Automatically adjust range</term>
        <listitem>
          <para>With this option turned on the modifier will dynamically adjust the start and end value parameters to the current min/max range of input property values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Color only selected elements</term>
        <listitem>
          <para>This option restricts the assignment of colors to currently selected particles or bonds.
          The colors of unselected particles or bonds will remain unchanged.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Keep selection</term>
        <listitem>
          <para>
            OVITO highlights selected particles in red in the interactive viewports.
            Since this would mask the actual colors assigned by this modifier, the modifier clears the current selection by default.
            This option retains the current selection so that it remains available to subsequent modifiers in the data pipeline.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </simplesect>

  <simplesect>
    <title>See also</title>
    <para>
      <pydoc-link href="modules/ovito_modifiers" anchor="ovito.modifiers.ColorCodingModifier"><classname>ColorCodingModifier</classname> (Python API)</pydoc-link>
    </para>
  </simplesect>

</section>