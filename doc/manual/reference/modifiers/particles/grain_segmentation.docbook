<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="particles.modifiers.grain_segmentation"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Grain segmentation</title>
  <para>
  This modifier determines the grain structure in a polycrystalline microstructure.
  </para>
  <para>
    The algorithm works in three steps:
      <itemizedlist>
        <listitem>The local structural environment and orientation of each atom is determined using <link linkend="particles.modifiers.polyhedral_template_matching">Polyhedral Template Matching</link> (PTM).</listitem>
        <listitem>A graph is created using the neighbors of each atom, where each atom is a graph node and each bond is a graph edge.</listitem>
        <listitem>Grains are created by hierarchical clustering of the graph.</listitem>
      </itemizedlist>
  </para>
  <para>
  The modifier sets the <literal>Cluster</literal> property, which is encoded as an integer value and indicates which grain an atom belongs to. A cluster value of zero means the atom does not belong to any grain.
  The modifier also sets the <literal>Structure Type</literal>, <literal>RMSD</literal>, and <literal>Orientation</literal> properties for each particle. A description of these properties is given in the <link linkend="particles.modifiers.polyhedral_template_matching">Polyhedral Template Matching</link> documentation.
  </para>

  <para>
  The method is illustrated in the table below. The local structural environment is determined for every atom using PTM (left). PTM also determines the local orientations (coloured, middle) but does not explicitly
  group atoms into grains. Hierarchical clustering is used to identify grains (right).
  </para>

  <para>
      <informaltable frame="all" colsep="1" rowsep="0">
        <tgroup cols="3">
          <colspec colname="ptm" colsep="1"/>
          <colspec colname="orientations" colsep="1" />
          <colspec colname="segmented" colsep="1"/>
          <thead>
            <row>
              <entry>Structure</entry>
              <entry>Lattice orientation</entry>
              <entry>Segmented grains</entry>
            </row>
          </thead>
          <tbody>
            <row valign="center" align="right">
            <entry align="center"><imagedata fileref="images/modifiers/grain_segmentation_ptm.png" format="PNG" scale="50" /></entry>
            <entry align="center"><imagedata fileref="images/modifiers/grain_segmentation_orientations.png" format="PNG" scale="50" /></entry>
            <entry align="center"><imagedata fileref="images/modifiers/grain_segmentation_segmented.png" format="PNG" scale="50" /></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
  </para>

    <informalfigure><screenshot><mediaobject><imageobject>
      <imagedata fileref="images/modifiers/grain_segmentation_panel.png" format="PNG" scale="50" />
    </imageobject></mediaobject></screenshot></informalfigure>

  <simplesect>
    <title>Algorithm</title>
    <para>
    The modifier creates grains by performing hierarchical clustering on the graph. Two types of hierarchical clustering algorithms are implemented:
    </para>

    <variablelist>
      <varlistentry>
        <term>Node Pair Sampling</term>
        <listitem>
          <para>
          Edge weights are set as <literal>exp(-d<superscript>2</superscript>/3)</literal>, where <literal>d</literal> is the misorientation in degrees. Grains are built up by contracting edges using the <emphasis>Node Pair Sampling</emphasis> method of <link xlink:href="https://arxiv.org/abs/1806.01664">Bonald et al.</link>
          </para>
          <para>
          This algorithm produces good segmentations in a range of microstructure types. It performs well on low-angle grain boundaries and can discriminate between grains and sub-grains.
          A drawback is that the merge distance parameter does not have an intuitive physical meaning.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Minimum Spanning Tree</term>
        <listitem>
          <para>
          In this algorithm the graph is replaced by its <link xlink:href="https://en.wikipedia.org/wiki/Minimum_spanning_tree">minimum spanning tree.</link>
          The edge weights are the misorientations between neighboring atoms.
          Grains are built up by contracting edges in sorted order (by misorientation, low to high).
          The distance of a contraction (or merge) is simply the edge misorientation.
          </para>

          <para>
          This is a fast algorithm which has lower memory usage. The merge distance has a simple interpretation (misorientation between neighboring atoms) and is scale invariant.
          Drawbacks are that it can produce poor results in microstructures containing low-angle grain boundaries, and it performs poorly in the presense of local perturbations due to, e.g., thermal atomic displacements or elastic lattice distortions. 
          This method is best suited for low-temperature simulations.
          </para>

          <para>
          This approach is similar to that of <link xlink:href="https://doi.org/10.1007/s11837-013-0831-9">Panzarino and Rupert</link>. The key differences are the use of PTM (more robust structural determination),
          a faster algorithm (minutes instead of days), and the formulation as a hierarchical clustering problem (effects of cutoff choices are visible).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </simplesect>

  <simplesect>
    <title>Parameters and options</title>
    <para>

    <variablelist>
      
      <varlistentry>
        <term>Log merge threshold</term>
        <listitem>
          <para>
            Specifies the maximum graph edge contraction distance and determines the resulting number and sizes of grains. A lower threshold produces more (and smaller) grains; a larger threshold produces fewer (and larger) grains. The scatter plot ("Log merge distance" vs "Merge size") can be used to select an appropriate merge threshold value.
            If the grains are well-separated, the scatter plot will contain a dense cluster at low distances, and a few isolated points at higher distances. An ideal threshold lies after the dense cluster, but before the isolated points (see screenshot).
            Note that this threshold parameter can be set to a negative value, because it is specified on a logarithmic distance scale.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Minimum grain size</term>
        <listitem>
          <para>
            Grains below this size are dissolved. The atoms contained within are set as 'orphan' atoms (see 'Adopt orphan atoms').
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>RMSD cutoff</term>
        <listitem>
          <para>
            The cutoff in the Root-Mean-Square Deviation used to determine the local structural environment. More details are given in the <link linkend="particles.modifiers.polyhedral_template_matching">Polyhedral Template Matching</link> documentation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Adopt orphan atoms</term>
        <listitem>
          <para>
            After clustering has been performed by the algorithm, some atoms might not be assigned to a grain, so-called 'orphan' atoms (due to <link xlink:href="https://doi.org/10.1016/j.commatsci.2016.11.027">Hoffrogge and Barrales-Mora</link>).
            This includes atoms that are part of grain boundaries. This option lets the modifier assign these orphan atoms to the nearest grain.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Color particles by grain</term>
        <listitem>
          <para>
            This option assigns each grain a unique color for easier visualization of the grain structure.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Output bonds</term>
        <listitem>
          <para>
            Whether to visualize the edges of the initial graph as bonds between atoms. This option is mainly for debugging purposes and has large memory requirements. It is not recommended for large datasets.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
    </para>
  </simplesect>

  <simplesect>
    <title>Example</title>
    <para>
      The panel below illustrates the effect of varying the merge threshold in a polycrystalline graphene sample, using the <emphasis>Node Pair Sampling</emphasis> algorithm.
      A good segmentation into 6 grains is achieved using a merge threshold of 14 (left).
      Reducing the threshold to 13.5 reveals a subgrain structure in the largest grain (middle). A further reduction of the threshold to 12.5 splits the largest grain into three subgrains (right).
    </para>

    <para>
      Note that the difference between subgrains and grains is not well defined. It is therefore up to the user to decide upon the best threshold value.
    </para>

    <para>
        <informaltable frame="all" colsep="1" rowsep="0">
          <tgroup cols="3">
            <colspec colname="6 grains" colsep="1"/>
            <colspec colname="7 grains" colsep="1" />
            <colspec colname="8 grains" colsep="1"/>
            <thead>
              <row>
                <entry>6 grains</entry>
                <entry>7 grains</entry>
                <entry>8 grains</entry>
              </row>
            </thead>
            <tbody>
              <row valign="center" align="right">
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_panel1.png" format="PNG" scale="50" /></entry>
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_panel2.png" format="PNG" scale="50" /></entry>
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_panel3.png" format="PNG" scale="50" /></entry>
              </row>
              <row valign="center" align="right">
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_1.png" format="PNG" scale="50" /></entry>
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_2.png" format="PNG" scale="50" /></entry>
              <entry align="center"><imagedata fileref="images/modifiers/grains_graphene_3.png" format="PNG" scale="50" /></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
    </para>
  </simplesect>

  <simplesect>
    <title>See also</title>
    <para>
      <pydoc-link href="modules/ovito_modifiers" anchor="ovito.modifiers.GrainSegmentationModifier"><classname>GrainSegmentationModifier</classname> (Python API)</pydoc-link>
    </para>
  </simplesect>

</section>

