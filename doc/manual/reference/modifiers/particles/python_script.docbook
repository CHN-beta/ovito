<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="particles.modifiers.python_script"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Python script modifier<ovito-pro/></title>

  <para>
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/modifiers/python_script_panel.png" format="PNG" scale="50" />
    </imageobject></mediaobject></screenshot></informalfigure>

    This modifier type lets you write your own user-defined function in the Python language to manipulate, analyze or extend the simulation data. 
    User-defined modifier functions are useful when the toolset of <link linkend="particles.modifiers">built-in modifiers</link> of OVITO is insufficient 
    to solve your specific problem.
  </para>
  <para>
    The system executes the user-defined Python function whenever it needs to recompute the results of the data pipeline,
    e.g. when jumping to a new frame of the loaded trajectory. Tne integrated code editor window lets 
    you edit the function's source code and implement your own data processing algorithms.
    Within the user-defined Python function you have complete access to the input dataset produced by the upstream data pipeline, 
    with the possibility to manipulate or extend the dataset as needed via OVITO's comprehensive 
    <pydoc-link href="index" no-pro-tag="1">Python programming interface</pydoc-link>.
  </para>

  <simplesect>
    <title>Usage</title>

    <para>
      <informalfigure><screenshot><mediaobject><imageobject>
        <imagedata fileref="images/modifiers/python_script_code_editor.png" format="PNG" scale="75" />
      </imageobject></mediaobject></screenshot></informalfigure>
      After inserting a new Python script modifier into the pipeline you can open the integrated code editor using the
      <guibutton>Code editor</guibutton> button. The editor window lets you change the source code for the user-defined modifier function,
      which initially consists of a few example statements. You should replace these statements with your own code, performing the 
      specific computations or actions that are needed to solve your problem. 
      The <pydoc-link href="introduction/custom_modifiers" anchor="custom-modifier-functions" no-pro-tag="1">scripting manual</pydoc-link> gives further
      instructions on how to write the user-defined modifier function. Note that the Python function must be named <code>modify()</code>,  
      however, you are free to define additional functions within the same source file and call them as sub-routines from the main modifier function.
    </para>

    <para>
      Once you are done writing the user-defined modifier function, press the <emphasis>Commit and run script</emphasis> button 
      in the code editor window (the "Play" button). This will compile the code by executing any top-level statements 
      including the function definition and then request an update of the data pipeline. As part of this pipeline update 
      your <code>modify()</code> function will get invoked by the system.
    </para>

    <para>
      Note that the pipeline system may run your <code>modify()</code> function repeatedly, 
      for example when stepping through a simulation trajectory. That means you should always write your <code>modify()</code> function
      in such a way that it doesn't have any side effects on the global state of OVITO. The function should be "pure" and stateless in the sense 
      that it only operates on the current dataset received from the system as a function parameter.
      The pipeline is free to decide whether it caches the results of your modifier function, and it may call your function 
      repeatedly if necessary. Thus, the function must be designed such that it can process 
      each trajectory frame in isolation. 
    </para>

  </simplesect>

  <simplesect>
    <title>Making the modifier function permanently available in OVITO</title>
    <para>
      First, you should give your modifier a meaningful name, making it easier for you to identify the modifier 
      in the data pipeline. The <link linkend="usage.modification_pipeline.pipeline_listbox">pipeline editor</link> of
      OVITO lets you to change the title of the modifier from the default "Python script" to a more descriptive label 
      that better summarizes the specific purpose of your Python function. In order to rename a modifier in the pipeline editor, make sure 
      it is selected and then click the pipeline item a second time to edit its name. 
    </para>
    <para>
      Next, you have two alternative ways of making your Python modifier permanently available in future program
      sessions. One is to save the current modifier, including the source code of the
      <code>modify()</code> function, as a <link linkend="modifier_templates">modifier template</link>. The modifier template will appear as a new
      entry in the list of available modifiers, allowing you to easily access the user-defined modifier in the future and insert it into a new data 
      pipeline.
    </para>
    <para>
      The second option is to save the source code as a <filename>.py</filename> file in 
      one of the following directories on your computer. OVITO Pro will automatically scan these directories and 
      display all <filename>.py</filename> scripts in the available modifiers list, from where you can inserted them 
      into a data pipeline with a single click.
      <itemizedlist>
        <listitem>All platforms: <filename>&lt;HOME&gt;/.config/Ovito/scripts/modifiers/*.py</filename></listitem>
        <listitem>Linux: <filename>&lt;INSTALLDIR&gt;/share/ovito/scripts/modifiers/*.py</filename></listitem>
        <listitem>Windows: <filename>&lt;INSTALLDIR&gt;/scripts/modifiers/*.py</filename></listitem>
        <listitem>macOS: <filename>&lt;INSTALLDIR&gt;/Ovito.app/Contents/Resources/scripts/modifiers/*.py</filename></listitem>
        <listitem>Anaconda: <filename>&lt;INSTALLDIR&gt;/share/ovito/scripts/modifiers/*.py</filename></listitem>
      </itemizedlist>
      Here, <filename>&lt;HOME&gt;</filename> and <filename>&lt;INSTALLDIR&gt;</filename> refer to your home directory and 
      the installation location of OVITO Pro on your computer, respectively. The latter location already contains a bunch of
      predefined Python modifier files shipping with the program.
    </para>
  </simplesect>

  <simplesect>
    <title>Examples</title>
    <para>
      The scripting manual contains several <pydoc-link href="introduction/examples" anchor="user-defined-modifier-functions" no-pro-tag="1">code examples</pydoc-link>  
      demonstrating how to write a <literal>modify()</literal> function:
      <itemizedlist>
        <listitem><pydoc-link href="introduction/examples/modifiers/msd_calculation" no-pro-tag="1">Calculating mean square displacement</pydoc-link></listitem>
        <listitem><pydoc-link href="introduction/examples/modifiers/order_parameter_calculation" no-pro-tag="1">Custom order parameter calculation</pydoc-link></listitem>
        <listitem><pydoc-link href="introduction/examples/modifiers/visualize_local_lattice_orientation" no-pro-tag="1">Color mapping to visualize local lattice orientation</pydoc-link></listitem>
        <listitem><pydoc-link href="introduction/examples/modifiers/select_overlapping_particles" no-pro-tag="1">Finding overlapping particles</pydoc-link></listitem>
      </itemizedlist>
    </para>
  </simplesect>

  <simplesect>
  <title>See also</title>
    <para>
      <simplelist>
        <member><pydoc-link href="introduction/custom_modifiers" no-pro-tag="1">How to write user-defined modifier functions</pydoc-link></member>
        <member><pydoc-link href="modules/ovito_modifiers" anchor="ovito.modifiers.PythonScriptModifier"><classname>PythonScriptModifier</classname> (Python API)</pydoc-link></member>
      </simplelist>
    </para>
  </simplesect>

</section>
