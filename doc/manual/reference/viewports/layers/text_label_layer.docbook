<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="viewport_layers.text_label"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Text label viewport layer</title>

  <para>
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/viewport_layers/text_label_overlay_panel.png" format="PNG" scale="60" />
    </imageobject></mediaobject></screenshot></informalfigure>
    This <link linkend="viewport_layers">viewport layer</link> renders some text 
    into the output image. The text string may contain placeholders that get replaced with the current values
    of <link linkend="usage.global_attributes">global attributes</link> dynamically computed in OVITO's data pipeline.
    This makes it possible to include dynamic information such as the current simulation time, the number of atoms,
    or numeric computation results in rendered images or movies.
  </para>

  <para>
    When a placeholder in the text string is replaced with a floating-point value, that value gets formatted using the 
    format specification string. You have the choice between decimal notation (<literal>%f</literal>), exponential notation (<literal>%e</literal>)
    and an automatic mode (<literal>%g</literal>). Furthermore, the format string allows you to control the output precision, i.e. the number of digits that
    appear after the decimal point. The format string must follow the standard convention of the <link xlink:href="https://en.cppreference.com/w/cpp/io/c/fprintf">printf()</link> C function.
  </para>

  <para>
    The <emphasis>Variables</emphasis> panel displays the list of available global attributes computed in the current pipeline, 
    which may be included in the text as placeholders, and which will get replaced with their dynamically computes values when 
    rendering an animation.
  </para>

  <simplesect>
    <title>Defining derived attributes</title>
    <para>
      Sometimes a global attribute computed by the data pipeline does not yet have the right 
      format, unit or normalization that is required for the text label display. For instance, 
      the <code>CommonNeighborAnalysis.counts.BCC</code> attribute computed by the
      <link linkend="particles.modifiers.common_neighbor_analysis">Common neighbor analysis</link> modifier
      reports the number of BCC atoms in the system. But what if you would like to print the <emphasis>fraction</emphasis>
      of BCC atoms instead of the absolute count?
    </para>
    <para>
      In order to divide the absolute atom count by the total number of atoms in the system we need to define a new derived attribute.
      This can be accomplished by inserting a <link linkend="particles.modifiers.python_script">Python script modifier<ovito-pro/></link> 
      into the data pipeline. This modifier executes a simple Python function computing the value of our new attribute
      on the basis of the existing attributes(s):
      <programlisting>def modify(frame, data):
    bcc_count = data.attributes['CommonNeighborAnalysis.counts.BCC']
    data.attributes['bcc_fraction'] = bcc_count / data.particles.count</programlisting>
      The new attribute <literal>bcc_fraction</literal> may now be included as a placeholder in the text label string to render it into the output image.
    </para>

  </simplesect>

   <simplesect>
    <title>See also</title>
    <para>
      <pydoc-link href="modules/ovito_vis" anchor="ovito.vis.TextLabelOverlay"><classname>TextLabelOverlay</classname> (Python API)</pydoc-link>
    </para>
   </simplesect>

</section>
