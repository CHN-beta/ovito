<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="viewport_overlays.python_script"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Python script overlay</title>

  <para>

    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/viewport_overlays/python_script_overlay_panel.png" format="PNG" />
    </imageobject></mediaobject></screenshot></informalfigure>
    <informalfigure><screenshot><mediaobject><imageobject>
       <imagedata fileref="images/viewport_overlays/python_script_overlay_code_editor.png" format="PNG" scale="60" />
    </imageobject></mediaobject></screenshot></informalfigure>
    This type of <link linkend="viewport_overlays">viewport overlay</link> allows you to write a custom Python script function to paint arbitrary
    text and graphics on top of images rendered by OVITO. This makes it possible to enrich a figure or a movie with
    additional information (e.g. a scale bar or data plots, see the examples below).
  </para>
  <para>
    The <guibutton>Edit script</guibutton> button opens the code editor where you enter the code for the custom <literal>render()</literal> function.
	This function is invoked by OVITO each time the viewport needs to be repainted or
    when an image or movie frame is being rendered. The function's first parameter is a
    <link xlink:href="https://doc.qt.io/qtforpython/PySide2/QtGui/QPainter.html"><literal>QPainter</literal></link> object,
    which allows to issue arbitrary drawing command and paint over the picture of the three-dimensional scene rendered by OVITO.
    The second parameter, <literal>args</literal>, is a dictionary containing additional information
    such as the viewport being rendered, the general render settings, and the viewport's projection parameters.
  </para>
  <para>
    Any errors that occur during script execution are displayed in the output area below.
    It also shows any output generated by calls to the <literal>print()</literal> Python function.
  </para>

  <para>
    The user-defined script has full access to OVITO's data model and can access viewport properties,
    camera and animation settings, modifiers, and data pipeline results.
    For more information on OVITO's Python interface and the object model, see the <pydoc-link href="index">Scripting Reference</pydoc-link>.
  </para>

   <simplesect>
    <title>See also</title>
    <para>
      <pydoc-link href="modules/ovito_vis" anchor="ovito.vis.PythonViewportOverlay"><classname>PythonViewportOverlay</classname> (Python API)</pydoc-link>
    </para>
   </simplesect>

</section>
