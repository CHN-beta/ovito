<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="scene_objects.particles"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Particles</title>

  <para>
    A particle system is (implicitly) defined in OVITO by a set of <link linkend="usage.particle_properties">particle properties</link>,
    one of them being the particle coordinates (<literal>Position</literal> property). This particle property is always
    present whereas other properties such as <literal>Particle Type</literal>, <literal>Particle Identifier</literal> or <literal>Radius</literal> 
    are optional properties, which may or may not be present depending on the contents of the simulation file. Furthermore,  
    modifiers in the <link linkend="usage.modification_pipeline">data pipeline</link> may dynamically add additional properties to the particles.
  </para>
  
  <simplesect xml:id="scene_objects.particle_types">
    <title>Typed properties</title>

    <para>
      <informalfigure><screenshot><mediaobject><imageobject>
        <imagedata fileref="images/scene_objects/particle_types_panel.png" format="PNG" scale="50" />
      </imageobject></mediaobject></screenshot></informalfigure>

      Molecular dynamics simulation codes use atom types to encode the chemical identity of atoms.
      (Note that OVITO typically uses the more general term "particles" in place of "atoms"). During data import into OVITO, this chemical information gets mapped to the
      particle property named <literal>Particle Type</literal>, which stores the per-particle type information encoded as an integer number.
      Additionally, OVITO maintains a list of particle types, each having a unique numeric ID, a human-readable name, and other attributes.
      Depending on the information found in the imported simulation file, particle types get either assigned chemical element names such as "Cu" or a generic name such as "Type 1", "Type 2", etc.
    </para>
    <para>
      The same scheme is used by OVITO to encode <emphasis>bond types</emphasis> and <emphasis>molecule types</emphasis> if they are defined in the simulation file.
      For each typed property, OVITO maintains a list of type definitions, which can be edited in the user interface
      shown in the screenshot. In case of particle types, each type definition also has a color and a radius attribute. These values are used
      to render the particles of that type in the viewports. This is unless particles have been assigned individual colors or radii in the form of the <literal>Color</literal> or <literal>Radius</literal> property.
      These particle properties take precedence over the corresponding per-type attributes.
    </para>
    <para>
      For particle types named after chemical elements, OVITO automatically assigns a default color and a default display radius
      according to an internal presets table. These presets can be edited in the <link linkend="application_settings.particles">application settings dialog</link>.
      Additionally, you can use the <guibutton>Save as defaults</guibutton> button to update the stored preset for the
      selected particle type to the current color and radius values. This even works for the generic particle types
      named "Type 1", "Type 2", etc., which are used by OVITO if no chemical names are available in the imported simulation file.
    </para>
    <para>
      Note that the "Particle types" list entry in the <link linkend="usage.modification_pipeline.pipeline_listbox">pipeline editor</link> will not show up if the imported simulation file 
      contains no particle type information at all. In this case OVITO does not create the <literal>Particle type</literal> property.
      The same applies to the "Bond types" and "Molecule types" entries, which will only appear if the simulation file contains corresponding type information.
    </para>
  </simplesect>

  <simplesect>
    <title>See also</title>
    <para>
      <simplelist>
      <member><pydoc-link href="modules/ovito_data" anchor="ovito.data.Property.types"><classname>Property.types</classname> (Python API)</pydoc-link></member>
      </simplelist>
    </para>
  </simplesect>

</section>
