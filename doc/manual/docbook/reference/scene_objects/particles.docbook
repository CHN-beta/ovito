<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="scene_objects.particles"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Particles</title>

  <para>
    A system of <emphasis>N</emphasis> particles is represented in OVITO as a set of <link linkend="usage.particle_properties">particle properties</link>,
    each being a uniform data array of length <emphasis>N</emphasis>:
    <screenshot><mediaobject><imageobject>
      <imagedata fileref="images/scene_objects/particles_data_model.png" format="png" scale="110" />
    </imageobject></mediaobject></screenshot>
    The property array with the name <literal>"Position"</literal> is always part of the particle dataset and contains the Cartesian coordinates of the particles.
    All other properties are optional. Whether they are present or not depends on the kind of simulation file you import
    and the <link linkend="usage.modification_pipeline">modifiers</link> you apply to the dataset within OVITO. That's because modifiers may add 
    new particle properties to the set, for example to store the results of a computation they perform.
  </para>
  <para>
    You can open the <link linkend="data_inspector">data inspector</link> panel of OVITO to view all particle properties that currently 
    exist in the output of the data pipeline. 
  </para>
  
  <simplesect xml:id="scene_objects.particle_types">
    <title>Typed properties</title>

    <para>
      <informalfigure><screenshot><mediaobject><imageobject>
        <imagedata fileref="images/scene_objects/particle_types_panel.png" format="PNG" scale="50" />
      </imageobject></mediaobject></screenshot></informalfigure>
      A <emphasis>typed</emphasis> particle property is a property array containing discrete numeric 
      values and a supplementary mapping of these numeric values to corresponding type definitions. 
      The <literal>"Particle Type"</literal> is a typical example for such a typed property. 
      It stores each particle's chemical type encoded as a unique integer value (1, 2, 3, ...), the so-called numeric type identifier.
      Additionally, the <literal>"Particle Type"</literal> property stores a list of type definition records, 
      which establishes the mapping between the numeric type ID of each particle and the auxiliary information 
      associated with that type, e.g. name and display color:
      
      <screenshot><mediaobject><imageobject>
        <imagedata fileref="images/scene_objects/typed_property.png" format="png" scale="70" />
      </imageobject></mediaobject></screenshot>
      
      Note that a dataset may not just contain a single typed property like the <literal>Particle Type</literal> property. 
      In fact, several typed properties can exist simultaneously, establishing several orthogonal classifications.
      Examples are the particle properties <literal>Residue Type</literal>, <literal>Structure Type</literal>, <literal>Molecue Type</literal>.
    </para>
    <para>
      All typed properties read from an imported simulation file are accessible in the pipeline editor
      as shown in the screenshot on the right. Here you can edit each type's attributes. In case of the <literal>Particle Type</literal>
      property, these settings directly affect how OVITO renders the particles belonging to the type.
    </para>
    <para>
      Particle types named after one of the standard chemical elements get automatically initialized with appropriate default values for
      the display color, display radius, van der Waals radius, and mass. If necessary, you can change the default values permanently 
      for each type using the corresponding presets menus indicated in the screenshot. You can even specify default parameters for particle
      types having generic names such as "Type 1", "Type 2", etc., which may be necessary if the imported simulation file contains numeric type
      information but no type names.
    </para>
  </simplesect>

  <simplesect>
    <title>See also</title>
    <para>
      <simplelist>
      <member><pydoc-link href="modules/ovito_data" anchor="ovito.data.Particles"><classname>Particles</classname> (Python API)</pydoc-link></member>
      <member><pydoc-link href="modules/ovito_data" anchor="ovito.data.Property"><classname>Property</classname> (Python API)</pydoc-link></member>
      <member><pydoc-link href="modules/ovito_data" anchor="ovito.data.Property.types"><classname>Property.types</classname> (Python API)</pydoc-link></member>
      </simplelist>
    </para>
  </simplesect>

</section>