<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="usage.scripting" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Scripting</title>

  <simplesect>
  <title>Introduction</title>
    <para>
       OVITO provides a scripting interface that makes it possible to automate certain tasks or to batch-process
       a large number of input files. The program comes with an integrated Python interpreter which allows you to control
       the program from a Python script. The scripting interface provides programmatic access to various program functions 
       such as importing and exporting data files, applying modifiers, and rendering images or movies.
    </para>
    <para>
       If you are not familiar with the Python language, you can find several tutorials and books online that cover this subject. 
       Note that OVITO supports the Python 2.x language standard.
    </para>
    <para>
       OVITO's scripting interface is fully documented in the <link xlink:href="python/index.html">OVITO Scripting Reference</link>.
    </para>
  </simplesect>
  
  <simplesect xml:id="usage.scripting.running_scripts">
  <title>Running scripts</title>
    <para>
       OVITO scripts are normal Python source files that can be created with any text editor. 
       To execute a script, start OVITO from the command line as follows. Optional arguments are in brackets:
       <screen><command>   ovito  [--nogui] --script myscript.py [datafile]</command></screen>
       This will execute the Python script file <command>myscript.py</command> immediately after program startup. The optional
       argument <command>[datafile]</command> specifies the path or URL of a file to be loaded
       before the script is executed. This can be a simulation file or an OVITO scene file, which allows you to pre-load a 
       certain program state before executing the script.
     </para>
     <para> 
       The optional <command>--nogui</command> option switches to a non-graphical batch
       mode, and OVITO will quit after the script has been executed. In this mode, OVITO's normal user interface is not shown, 
       which is useful when running OVITO scripts on remote machines that don't have a graphics terminal. 
       Note to Windows users: On this platform you won't see any console output when using this command line switch. The script is still executed 
       in the background, but this makes it difficult to tell whether execution was successful or not. On Linux and Mac OS, 
       error messages and text output generated by the script are sent to the terminal.
    </para>    
  </simplesect>

  <simplesect xml:id="usage.scripting.running_script_commands">
  <title>Passing parameters to scripts</title>
    <para>
       The <command>--exec</command> command line option allows you to directly pass a script <emphasis>command</emphasis> to OVITO, which
       will be executed:
       <screen><command>   ovito --exec "temperature=800" --script myscript.py</command></screen>
       In this example, the string <command>temperature=800</command> is interpreted as a normal Python
       statement, which assigns a value to a variable. This variable can be accessed by the script <command>myscript.py</command>,
       which is executed in the same context. To set multiple script variables, you can use <command>--exec</command> several times, or simply 
       delimit multiple Python statements with semicolons. 
    </para>
    
  </simplesect>
  
</section>
