<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="usage.import" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Importing data</title>

  <para>
    To load a simulation file from your local computer in OVITO, select
    <menuchoice><guimenu>File</guimenu><guimenuitem>Load File</guimenuitem></menuchoice> from the menu or use the corresponding button in the toolbar.
    OVITO detects the format of the file automatically (see <link linkend="usage.import.formats">list of supported formats</link>).
    Compressed text-based files having a <filename>.gz</filename> suffix can directly be read by OVITO.
  </para>
  <para>
    <informalfigure>
        <screenshot><mediaobject><imageobject>
        <imagedata fileref="images/scene_objects/file_wildcard_pattern.png" format="PNG" scale="50" />
        </imageobject></mediaobject></screenshot>
    </informalfigure>
    The imported dataset will appear in the viewports as a new object
    and is also represented by the first item under the "Data source" section of the <link linkend="usage.modification_pipeline.pipeline_listbox">pipeline editor</link>, as highlighted in the screenshot on the right.
  </para>
  <para>
    Select this list item to open the <link linkend="scene_objects.file_source">"External File"</link> panel below the pipeline editor, which is also visible in the screenshot.
    The tool buttons at the top of the panel allow you to reload
    the input file in case has been changed outside of OVITO, or to pick a different file as data source of the <link linkend="usage.modification_pipeline">pipeline</link>.
    Replacing the input dataset can be helpful if you have set up a data analysis pipeline and want
    to apply it on a different simulation dataset.
  </para>

  <simplesect xml:id="usage.import.sequence">
    <title>Simulation sequences</title>
    <para>
       OVITO can load trajectories consisting of a series of simulation snapshots.
       The following scenarios are supported by the software:
       <variablelist>
         <varlistentry><term>A series of files:</term><listitem>
           <para>
		       When you import a simulation file, OVITO tries to detect if it is part of a numbered sequence of files
           with similar names in the same directory. To this end, the last number (if any) in the filename you picked is replaced with the wildcard
           character <literal>*</literal> to generate a search pattern, which is subsequently used to look for other files belonging to the same sequence.
		       For instance, if you imported a file named <filename>anim1c_5000.dump</filename>, OVITO will generate the search pattern
		       <filename>anim1c_*.dump</filename> to find the other snapshots (e.g. <filename>anim1c_0.dump</filename>,
		       <filename>anim1c_1000.dump</filename>, <filename>anim1c_2000.dump</filename>, etc). It is possible to
		       manually override the generated file pattern in the input field highlighted in the screenshot.
           </para>
         </listitem></varlistentry>

         <varlistentry><term>One file containing multiple frames:</term><listitem>
           <para>
		       OVITO automatically detects when the imported file contains more than one frame and loads them as an animation sequence.
           For some file types, e.g. XYZ and LAMMPS dump, this is indicated by the <emphasis>Contains multiple timesteps</emphasis>
           checkbox highlighted in the screenshot. Note that OVITO typically keeps only the data of a single frame in memory at a time.
           Subsequent frames are loaded into memory only when needed, for example if you play back the animation or move the time slider.
           </para>
         </listitem></varlistentry>

    		 <varlistentry><term>Separate files for topology and trajectories:</term><listitem>
           <para>
            Some MD simulation codes work with separate topology and trajectory files. The topology file contains the static definition of
            atoms, bonds, etc. while the trajectory file contains the computed trajectories and other time-dependent data generated by the simulation.
            In such cases you should open the topology file first (e.g. a LAMMPS <emphasis>data</emphasis> file).
            Then apply the <link linkend="particles.modifiers.load_trajectory">Load trajectory</link> modifier to load the time-dependent atomic positions
            from the trajectory file (e.g. a LAMMPS <emphasis>dump</emphasis> file). This modifier will
            combine both pieces of information -the static topology and the dynamic trajectory data- into a single animatable
            dataset.
           </para>
         </listitem></varlistentry>

       </variablelist>
    </para>

    <para>
       OVITO will display a timeline and a time slider at the bottom of main window when a simulation sequence with more than one frame
       was loaded. Learn more about OVITO's animation functions in <link linkend="usage.animation">this section</link> of the manual.
    </para>

  </simplesect>

  <section xml:id="usage.import.formats">
  <title>Supported file formats</title>
  <para>
  	OVITO provides readers for a variety of input file formats, in particular data formats written by molecular dynamics
    and other atomistic simulation codes. In addition, it can load and visualize other types of data, for example
    triangle meshes and voxel data (grid fields).
    <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>File format</entry>
              <entry>Description</entry>
              <entry>Data type</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>LAMMPS&#xA0;dump</entry>
              <entry><para>File format used by the <link xlink:href="http://lammps.sandia.gov">LAMMPS molecular dynamics code</link>. OVITO supports both text-based and binary dump files.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>LAMMPS&#xA0;data</entry>
              <entry><para>File format used by the <link xlink:href="http://lammps.sandia.gov/doc/read_data.html">LAMMPS molecular dynamics code</link>.</para></entry>
              <entry>particles, bonds</entry>
            </row>
            <row>
              <entry>XYZ</entry>
              <entry><para>A simple column-based text format, which is documented <link xlink:href="http://en.wikipedia.org/wiki/XYZ_file_format">here</link>.</para>
                <para>The basic XYZ format does not contain simulation cell information. OVITO takes the axis-aligned bounding box of particles as the simulation box in this case.
                The program also supports the <link xlink:href="http://libatoms.github.io/QUIP/io.html#module-ase.io.extxyz">extended XYZ format</link>, which includes information on the simulation cell,
                boundary conditions, and per-particle fields.</para>
                </entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>POSCAR / XDATCAR / CHGCAR</entry>
              <entry><para>File formats used by the <emphasis>ab initio</emphasis> simulation package <link xlink:href="http://www.vasp.at/">VASP</link>.
                    OVITO can read and visualize charge density fields from CHGCAR files.</para></entry>
              <entry>particles, grid&#xA0;data</entry>
            </row>
            <row>
              <entry>IMD</entry>
              <entry><para>File format used by the molecular dynamics code <link xlink:href="http://imd.itap.physik.uni-stuttgart.de/">IMD</link>.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>CFG</entry>
              <entry><para>File format used by the <link xlink:href="http://li.mit.edu/Archive/Graphics/A/">AtomEye</link> visualization program.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>DL_POLY</entry>
              <entry><para>File format used by the molecular simulation package <link xlink:href="https://www.scd.stfc.ac.uk/Pages/DL_POLY.aspx">DL_POLY</link>.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>PARCAS</entry>
              <entry><para>Binary file format written by the MD code <emphasis>Parcas</emphasis> developed in K. Nordlund's group at University of Helsinki.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>NetCDF</entry>
              <entry><para>Binary format for molecular dynamics data following the <link xlink:href="http://ambermd.org/netcdf/nctraj.pdf">AMBER format convention</link>. NetCDF files are produced by the LAMMPS <link xlink:href="http://lammps.sandia.gov/doc/dump_netcdf.html">dump netcdf</link> command.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>PDB</entry>
              <entry><para>Protein Data Bank (PDB) files (experimental support).</para></entry>
              <entry>particles, bonds</entry>
            </row>
            <row>
              <entry>FHI-aims</entry>
              <entry><para>Geometry and log-file formats used by the <emphasis>ab initio</emphasis> simulation package <link xlink:href="https://aimsclub.fhi-berlin.mpg.de/index.php">FHI-aims</link>.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>GSD/HOOMD</entry>
              <entry><para>Binary format for molecular dynamics data used by the <link xlink:href="http://glotzerlab.engin.umich.edu/hoomd-blue/">HOOMD-blue code</link>. See <link xlink:href="http://gsd.readthedocs.io">GSD (General Simulation Data) format</link>.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>CASTEP</entry>
              <entry><para>File format used by the <link xlink:href="http://www.castep.org">CASTEP</link> ab initio code. OVITO can read the <link xlink:href="http://www.tcm.phy.cam.ac.uk/castep/documentation/WebHelp/content/modules/castep/expcastepfileformats.htm"><literal>.cell</literal>, <literal>.md</literal> and <literal>.geom</literal> formats</link>.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>XSF</entry>
              <entry><para>File format used by the <link xlink:href="http://www.xcrysden.org/doc/XSF.html">XCrySDen</link> program.</para></entry>
              <entry>particles, grid&#xA0;data</entry>
            </row>
            <row>
              <entry>Cube</entry>
              <entry><para>File format used by the <emphasis>Gaussian</emphasis> simulation package. Specifications of the format can be found <link xlink:href="https://h5cube-spec.readthedocs.io/en/latest/cubeformat.html">here</link> and <link xlink:href="http://paulbourke.net/dataformats/cube/">here</link>.</para></entry>
              <entry>particles, grid&#xA0;data</entry>
            </row>
            <row>
              <entry>GALAMOST</entry>
              <entry><para>XML-based file format used by the <link xlink:href="http://galamost.ciac.jl.cn/index.php">GALAMOST molecular dynamics code</link>.</para></entry>
              <entry>particles, bonds</entry>
            </row>
            <row>
              <entry>Quantum Espresso</entry>
              <entry><para>Input data format used by the <link xlink:href="https://www.quantum-espresso.org/">Quantum Espresso</link> electronic-structure calculation code.</para></entry>
              <entry>particles</entry>
            </row>
            <row>
              <entry>VTK</entry>
              <entry><para>Format used by the <emphasis>Visualization Toolkit</emphasis> (VTK). This text-based format is documented <link xlink:href="http://www.vtk.org/VTK/img/file-formats.pdf">here</link>. Note that OVITO supports only triangular cells.</para></entry>
              <entry>triangle&#xA0;mesh</entry>
            </row>
            <row>
              <entry>OBJ</entry>
              <entry><para>Common text-based format for storing triangle mesh geometry (see <link xlink:href="https://en.wikipedia.org/wiki/Wavefront_.obj_file">here</link>).</para></entry>
              <entry>triangle&#xA0;mesh</entry>
            </row>
            <row>
              <entry>STL</entry>
              <entry><para>Another popular format for storing triangle mesh geometry (see <link xlink:href="https://en.wikipedia.org/wiki/STL_(file_format)">here</link>). Note that OVITO supports only STL files in ASCII format.</para></entry>
              <entry>triangle&#xA0;mesh</entry>
            </row>
            <row>
              <entry>ParaDiS</entry>
              <entry><para>File format of the <link xlink:href="http://paradis.stanford.edu">ParaDiS</link> discrete dislocation dynamics code.</para></entry>
              <entry>dislocations</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </section>

  <section xml:id="usage.import.remote">
    <title>Loading remote data</title>
    <para>
       OVITO comes with a built-in SSH client for accessing files on remote machines. It can save you from having to transfer
       files stored in remote locations, for example on HPC clusters, to your local desktop computer first.
       To open a data file stored on a remote machine, select
       <menuchoice><guimenu>File</guimenu><guimenuitem>Load Remote File</guimenuitem></menuchoice> from the menu.
    </para>
    <para>
       The current program version does not provide a way to browse directories on remote machines. That means you have to directly specify
       the full path of the remote file as an URL of the form:
       <screen><command>    sftp://user@hostname/path/filename</command></screen>
       Where <command>sftp://</command> is the remote file access protocol,
       <command>user</command> the SSH login name on the remote machine,
       <command>hostname</command> the name of the remote machine,
       and <command>/path/filename</command> the full path to the simulation file to import.
    </para>
    <para>
       When OVITO connects to the remote machine, it will ask for the login password or the passphrase for the private key to be used for authentication.
       Once established, the SSH connection is kept alive during the program session. OVITO makes a temporary copy of the remote file on the local computer before
       loading the data into memory to speed up subsequent accesses to simulation frames. The local file copies are cached until you close OVITO or
       until you hit the <emphasis>Reload</emphasis> button in the <link linkend="scene_objects.file_source">External File</link> panel.
    </para>

    <simplesect xml:id="usage.import.command_line">
      <title>Using the command line</title>
      <para>
        If you launch OVITO from a terminal, you can directly specify a file to load. This works for local and remote
        files:
        <screen>
      <command>ovito /path/filename</command>
      <command>ovito sftp://hostname/path/filename</command>
        </screen>
      </para>
    </simplesect>
  </section>

  <section xml:id="usage.import.multiple_datasets">
    <title>Visualizing multiple datasets</title>
    <para>
      <informalfigure>
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="images/usage/importexport/datasets_side_by_side.png" format="PNG" scale="50" />
        </imageobject></mediaobject></screenshot>
      </informalfigure>
      OVITO has the capability to manage several objects in the same three-dimensional scene.
      This enables you to import and visualize several datasets together in a single picture as shown on the right.
      You can also visualize a dataset in several different ways, either side by side or superimposed on each other,
      using <link linkend="clone_pipeline">branched data pipelines</link>, which dynamically duplicate the imported data and process the copies in different ways.
    </para>
    <para>
      The simplest way to visualize multiple datasets in one picture or animation is to invoke the
      <menuchoice><guimenu>File</guimenu><guimenuitem>Load File</guimenuitem></menuchoice> function from the menu
      several times to load all datasets into the same scene.
      When importing the second dataset, OVITO will ask you whether to replace the already loaded dataset or not.
      Select the "<emphasis>Add to scene</emphasis>" option here in order to insert it as an additional object into the existing scene.
    </para>
    <para>
      <informalfigure>
        <screenshot><mediaobject><imageobject>
          <imagedata fileref="images/usage/importexport/pipeline_selector.png" format="PNG" scale="50" />
        </imageobject></mediaobject></screenshot>
      </informalfigure>
      The <emphasis>pipeline selector</emphasis> box shown in the screenshot lists all objects of the current scene
      and lets you switch the selection between them. Each dataset has its own data pipeline associated with it. Thus, you can apply different modifiers
      to the individual datasets. The modifier pipeline of the currently selected dataset is displayed in the
      <link linkend="usage.modification_pipeline.pipeline_listbox">pipeline editor</link> beneath the pipeline selector box.
    </para>

    <simplesect xml:id="usage.import.positioning_objects">
      <title>Positioning datasets in the scene</title>
      <para>
        OVITO places imported datasets in a default position relative
        to the scene's global coordinate system. Thus, when loading the second dataset into the same scene,
        it will appear superimposed in the same spatial location as the first dataset, which may not be what you want.
      </para>
      <para>
        In order to correct this, you can move the individual objects around in the scene and arrange them as needed
        for your visualization. In the example picture at the top of this page the second dataset has been translated along the x-axis
        to place it next to the first dataset. To do this, use the <emphasis>Translate</emphasis> mode, which
        is found in the top toolbar above the viewports:
        <informaltable frame="none" colsep="0" rowsep="0">
          <tgroup cols="2">
            <tbody>
              <row valign="top">
                <entry>
                  <screenshot><mediaobject><imageobject>
                    <imagedata fileref="images/usage/importexport/translate_tool.png" format="PNG" scale="50" />
                  </imageobject></mediaobject></screenshot>
                </entry>
                <entry>
                  <screenshot><mediaobject><imageobject>
                    <imagedata fileref="images/usage/importexport/translate_tool_numeric_fields.png" format="PNG" scale="50" />
                  </imageobject></mediaobject></screenshot>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        While the <emphasis>Translate</emphasis> mode is active, you can move objects around in the viewports
        using the mouse. Alternatively, you can enter the desired position of the selected object numerically using the
        input fields displayed in the status bar while the <emphasis>Translate</emphasis> mode is selected.
      </para>
    </simplesect>

    <simplesect>
      <title>Cloning pipelines</title>
      <para>
        Instead of importing several data files into OVITO, you can also duplicate a dataset right in OVITO in order
        to visualize the data in various different ways, for example by applying different sets of modifiers to the replica
        of the dataset. This is done using the <link linkend="clone_pipeline">Clone Pipeline</link> function,
        found under the <guimenu>Edit</guimenu> menu.
      </para>
    </simplesect>

  </section>

</section>
