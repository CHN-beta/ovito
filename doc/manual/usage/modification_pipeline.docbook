<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="usage.modification_pipeline" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>The modification pipeline</title>

  <para>
     <figure>
      <title>Illustration of the modification pipeline concept</title>
      <screenshot><mediaobject><imageobject>
            <imagedata fileref="images/modifiers/pipeline_example.png" format="png" />
       </imageobject></mediaobject></screenshot>
    </figure> 
    The central concept in OVITO's software design is the so-called <emphasis>modification pipeline</emphasis>. It describes a sequence of operations (<emphasis>modifiers</emphasis>)
    defined by the user that act on the simulation data. After the data has undergone these modification steps, the final result is shown on the screen.
    OVITO provides a <link linkend="particles.modifiers">set of modifier types</link>, each performing a different basic task such as selecting particles, coloring particles, or removing particles. 
    By combining and arranging these simple building blocks in a modification pipeline, the user can control the visualization of the simulation data in a 
    very flexible manner.
  </para> 
  <para>
    Each type of modifier provided by the program has a certain set of parameters that control its operation. OVITO's modifiers allow working non-destructively with the simulation data. 
    That means, you can change modifier parameters at any time, and OVITO will immediately recalculate the effect on the original simulation data and
    update the particle display. To accomplish this, OVITO basically keeps two sets of data in memory: The original particles read from the external input
    file and the processed dataset that came out of the last evaluation of the modification pipeline. The latter is regenerated every time you change the modification pipeline 
    in some way. An efficient caching mechanism keeps the amount of data processing at a minimum by re-evaluating only those modifiers that are affected by a change.
  </para>

  <simplesect xml:id="usage.modification_pipeline.pipeline_listbox">
    <title>The pipeline editor</title>
    <para>
	    <figure><title>The modification pipeline editor</title><screenshot><mediaobject><imageobject>
	       <imagedata fileref="images/command_panel/pipeline_editor.png" format="PNG" />
	    </imageobject></mediaobject></screenshot></figure>
       The pipeline editor, shown on the right, is the central place to set up the sequence of modifications. 
       It displays the current modification pipeline and lets the user insert new modifiers and change their parameters.
    </para>
    <para>   
       After importing a new simulation file into OVITO, the modification 
       pipeline is initially empty. However, the pipeline editor already shows two sections labeled "Display" and "Input", which are always present.
       The "Display" section contains one or more items controlling the visual display of particles and other elements loaded from the file. 
       The items under the "Input" section represent the original imported data, i.e. the content of the external data source that enters the modification pipeline.
    </para>
    <para>
       Above the pipeline editor is a drop-down box labeled "Add modification...", which contains a list of <link linkend="particles.modifiers">available modifiers</link>. 
       Picking an entry from that box inserts a new modifier into the modification pipeline. The new modifier will be inserted <emphasis>right above</emphasis> the
       currently selected pipeline item. Note that the modification pipeline is displayed in a bottom-up order. That is, the data source 
       is at the bottom and modifiers are executed from bottom to top.
    </para>
    <para>
       You can temporarily disable individual modifiers in the modification pipeline by unchecking the box next to them. To permanently remove a modifier from the pipeline, use the red 
       "Delete Modifier" tool button on the right. The up and down arrow buttons allow to change the order of modifiers.
    </para>
  </simplesect>

  <simplesect xml:id="usage.modification_pipeline.input">
    <title>The data source</title>
    <para>
      The section "Input" at the bottom of in the pipeline editor represents the source of the modification pipeline, i.e. the input simulation file. 
      Selecting the filename entry opens a panel that, among other things, allows replacing the input of the modification pipeline with a different file. 
    </para>
    <para>
      Depending on the contents of the loaded file, the "Input" section lists additional sub-entries corresponding to various input elements. For instance, the 
      <emphasis>Simulation cell</emphasis> entry represents the simulation box geometry and boundary conditions that were read from the external file. 
    </para>
    <para>
      If the imported simulation file contains information on particle types, they are listed under the <emphasis>Particle types</emphasis> entry.
      You can adjust the name, color, and display radius of individual particle types here. Note that a particle radius of zero means that the default 
      display radius will be used instead (which is set in the <link linkend="display_objects.particles">Particles display object</link>).
    </para>
  </simplesect>

  <simplesect xml:id="usage.modification_pipeline.display">
    <title>Display objects</title>
    <para>
      The results that leave the modification pipeline are shown in the interactive viewports. So called <link linkend="display_objects">display objects</link> are responsible for 
      actually rendering a visual representation and displaying that output data. The "Display" section of the pipeline editor lists the individual display objects that are. For instance, 
      particles are rendered by the <link linkend="display_objects.particles">Particles display object</link>, which exposes additional parameters that control the appearance of
      particles. There is also a separate display object that controls the display of the simulation cell. When working with OVITO's modifiers, you will notice that
      additional objects may appear under the "Display" section to render other visual elements such as <link linkend="display_objects.bonds">bonds</link> and <link linkend="display_objects.vectors">displacement vectors</link>.
    </para>
    <para>
      You can hide individual display elements by unchecking the box next to the corresponding display object in the pipeline editor.
    </para>
  </simplesect>

</section>
