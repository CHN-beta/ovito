<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="usage.modification_pipeline" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Modification pipeline</title>

  <para>
     <figure>
      <title>Illustration of the modification pipeline concept</title>
      <screenshot><mediaobject><imageobject>
            <imagedata fileref="images/modifiers/pipeline_example.png" format="png" />
       </imageobject></mediaobject></screenshot>
    </figure> 
    A central concept of OVITO is the so-called <emphasis>modification pipeline</emphasis>. It refers to a user-defined sequence of data operations (<emphasis>modifiers</emphasis>)
    that are applied to the input simulation data before it gets displayed on screen. 
    OVITO provides <link linkend="particles.modifiers">various modifier types</link>, each performing a different basic task such as selecting particles, coloring particles, or deleting particles.
    By combining these simple building blocks and arranging them in a modification pipeline the user can visualize and analyze the simulation data in a 
    very flexible manner.
  </para> 
  <para>
    Each modifier has certain parameters that control its operation. 
    OVITO's data flow concept allows to work non-destructively with the simulation data. 
    That means, you can change modifier parameters at any time, and OVITO will immediately recalculate the effect of the modifier on the original simulation data and
    update the particle display. To accomplish this, OVITO keeps two copies of the data in memory: 
    The original set of particles loaded from the external input file and the processed data, which resulted from the last evaluation of the modification pipeline. 
    The latter is recomputed every time you alter the modification pipeline in some way. 
    An efficient caching mechanism keeps the amount of data processing to a minimum by re-evaluating only 
    those modifiers that are affected by a parameter change.
  </para>

  <simplesect xml:id="usage.modification_pipeline.pipeline_listbox">
    <title>The pipeline editor</title>
    <para>
	    <figure><title>The modification pipeline editor</title><screenshot><mediaobject><imageobject>
	       <imagedata fileref="images/command_panel/pipeline_editor.png" format="PNG" />
	    </imageobject></mediaobject></screenshot></figure>
       The pipeline editor, shown in the screenshot on the right, is the central place to set up the sequence of modifiers. 
       It displays the current modification pipeline and lets you insert new modifiers, reorder them, or modify their parameters.
    </para>
    <para>   
       After importing a new simulation file in OVITO, the modification 
       pipeline is initially empty. However, the pipeline editor already shows two sections labeled "Display" and "Input", which are always present.
       The "Display" section contains one or more items controlling the visual display of particles and other elements such as the simulation box. 
       Items under the "Input" section represent the imported data, i.e. the original content of the external data file 
       which enters the modification pipeline.
    </para>
    <para>
       Above the pipeline editor you find a drop-down box labeled "Add modification...", which contains the list of <link linkend="particles.modifiers">available modifiers</link>
       that can be applied to the data. 
       Picking an entry from that box inserts a new modifier into the modification pipeline. The new modifier will be inserted right above the
       currently selected pipeline item. Note that the modification pipeline is displayed in bottom-up order. That means the data source 
       is located at the bottom, and the modifier at the top of the list is executed last.
    </para>
    <para>
       You can temporarily disable individual modifiers in the modification pipeline by unchecking the box next to them. 
       To permanently remove a modifier from the pipeline, use the <emphasis>Delete Modifier</emphasis> button in the toolbar on the right. 
       The up and down arrow buttons change the order of modifiers in the pipeline.
    </para>
  </simplesect>

  <simplesect xml:id="usage.modification_pipeline.input">
    <title>The input elements</title>
    <para>
      The "Input" section in the pipeline editor represents the data source of the modification pipeline, i.e. the external simulation file.
      Selecting the filename entry opens a panel in the area below the pipeline editor that, among other things, allows replacing the input of the 
      existing modification pipeline with a different file. 
    </para>
    <para>
      Depending on the contents of the loaded input file, the "Input" section lists additional sub-entries corresponding to various parts of the 
      input such as the simulation box and the list of particle types.
    </para>
    <para>
      If the imported simulation file contains particle type information, the types are listed under the <emphasis>Particle types</emphasis> entry.
      You can adjust the name, color, and display radius of the defined particle types here. Note that a particle radius of zero means that the default 
      display radius will be used (which is set in the <link linkend="display_objects.particles">Particle display settings</link>).
    </para>
  </simplesect>

  <simplesect xml:id="usage.modification_pipeline.display">
    <title>Display objects</title>
    <para>
      The computed results of the modification pipeline are displayed in the interactive viewports of OVITO. So-called <link linkend="display_objects">display objects</link> are responsible for 
      rendering the data. The "Display" section of the pipeline editor lists the display objects that are currently active. 
      Particles are rendered by the <link linkend="display_objects.particles">Particles display object</link>, which exposes parameters that control the appearance of
      particles. There's also a separate display object for the simulation cell, for example. When adding certain modifiers to the pipeline, you may notice that
      additional entries appear under the "Display" section. They represent additional visual elements such as 
      <link linkend="display_objects.bonds">bonds</link> or <link linkend="display_objects.vectors">displacement vectors</link> and allow you
      to adjust their appearance.
    </para>
    <para>
      You can turn off the display of individual elements by unchecking the corresponding box in the pipeline editor.
    </para>
  </simplesect>

  <simplesect xml:id="usage.modification_particle_selection">
    <title>Particle selection</title>
    <para>
      OVITO provides several modifiers that allow to select a subset of particles (e.g. the <link linkend="particles.modifiers.select_particle_type">Select particle types</link> modifier). 
      Other modifiers, when placed further down the modification pipeline, act only on the selected particles 
      (e.g. the <link linkend="particles.modifiers.delete_selected_particles">Delete selected particles</link> modifier).
      OVITO stores the current selection state in a standard particle property called <literal>Selection</literal>.
      Its value is 1 for particle that are selected, and 0 otherwise. Particle whose <literal>Selection</literal> property
      is nonzero are rendered with a red color in OVITO's interactive viewports to indicate that they are currently selected.
      However, their normal display color is always used when rendering an output image.
    </para>
    <para>
      Like any other particle property, the <literal>Selection</literal> property
      can be changed multiple times within a modification pipeline, for example to select a first group of particles, change their color using
      the <link linkend="particles.modifiers.assign_color">Assign color</link> modifier, then
      select another group of particles,
      and assign a different color to them using a second <link linkend="particles.modifiers.assign_color">Assign color</link> modifier.
      In other words, the selection property of a particle can have different values at different points along the
      modification pipeline. Which selection a modifiers sees depends on where it is placed in the modification pipeline.
      Note that some modifiers like the <link linkend="particles.modifiers.assign_color">Assign color</link> modifier 
      clear the current selection by default to prevent the particles from being rendered in the red selection marker color
      (which would mask the particles' real color assigned by the modifier).
    </para>
  </simplesect>

</section>
