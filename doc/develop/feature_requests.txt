User interface improvements:

- Let the user configure the default colors and radii assigned to different atom types.
- Save more user-defined default settings (e.g. renderer type, particle colors, math expressions).
- Add support for keyboard shortcuts (requested by Fossati, Paul C).
- User-defined color maps (requested by Wolfgang Verestek)
 
Work-flow improvements:

- Copy/Paste function for modifiers.
- "User-defined" modifiers, i.e. saving/loading often-needed sequences of modifiers (requested by Tobias Brink)
- The particle information applet should allow the user to click on and select bonds directly (instead of picking the two particles).
- Add support for low-dimensional systems.

New visualization features:

- Option to include frame number/time-step in a rendered movie.
- More particle representations (e.g. open circles/rectangles)
- Test OpenGL rendering support for more than 12 million particles.

New analysis features:

- Compute center of mass of a group of atoms, output to file
- Calculation of local atomic number density functions (proposed by Sha Zhendong)
- Create Bonds modifier: Add 'lower bound' parameter such that, when using the modifier several times, bonds with different lengths can be assigned different colors.
- Plotting the value of a certain property of a certain particle versus simulation time. To make this work, all simulation frames need to be kept in memory (requested by Taojun).

New I/O functions:

- Export of general triclinic cells to LAMMPS data/dump formats. See http://lammps.sandia.gov/doc/Section_howto.html#howto_12
- Import bond information from LAMMPS.
- Allow the user to permanently override the PBC flags read from an input file.

Performance improvements:

- Improve performance of Voronoi analysis modifier by using Voro++ container class.

Scripting features:

- Extend scripting interface to viewport overlays.
- Python 3.x compatibility. 

NirajGupta@my.unt.edu:

I also had a feature request, maybe you can consider adding at some point. Since you have a very quick coordination search implemented, 
would it be possible to also implement a "Compute Radial Property"? Where in one can define a radius, and define an expression, and produce a 
new channel that sums or averages over all the atoms within that radius. For instance, if I've outputted the per atom stress tensor and volume in a 
LAMMPS dump, I can specify a radius  of 10 and write an expression like sum(c_stress1)/sum(c_vol) to get an averaged stress component over all the 
atoms within a 10 ang radius, and assign that value to that atom (more realistically to that point in space). I've written a little post-processing 
tool to do this, but perhaps it would useful to other users. 
