User interface improvements:

- Default directory for image/movie output should be the path of the current data file.
- Save more user-defined default settings (e.g. renderer type, math expressions).
- Add support for keyboard shortcuts (requested by Fossati, Paul C).
- Make the viewport menu easier to discover.
- Add file export function to Construct Surface Mesh modifier, which allows to export the mesh to a VTK file (requested by konstantin.avchachov@helsinki.fi).
 
Work-flow improvements:

- Add support for low-dimensional systems.

New visualization features:

- Visualize polyhedra (like Vesta).
- Particle text labels (joy5142@psu.edu)
- More particle representations (e.g. open circles).
- Test OpenGL rendering support for more than 12 million particles.

Unresolved OpenGL problems:

- Shader compilation error (:/core/glsl/lines/line.vs):
    (chen.qwj@gmail.com, NVIDIA Quadro FX 4600, Linux, OpenGL 2.1)
    (Group laptop, Intel 965/963 Graphics, GLSL 110, Windows, OpenGL 2.0)
- System crash with NVidia GT 630 and Noveau graphics driver on Ubuntu 14.04. 
    Installing the proprietary Nvidia driver solves the issue.
- Ovito crashes when displaying particles on Linux system:
    OpenGL vendor string: Intel Open Source Technology Center
    OpenGL renderer string: Mesa DRI Intel(R) Ivybridge Server 
    OpenGL version string: 2.1 Mesa 10.1.2
- Crash when moving the viewport camera:
    Windows, AMD Radeon HD8490, Core profile 3.2 (ljloverq@163.com)
    Windows, ATI Mobility Radeon HD 5650, 3.2.9756 Core Profile Forward-Compatible Context (biyikli.emre@gmail.com)
    Workaround is to disable the use of geometry shaders.
- Simulation cell doesn't show up in rendered images:
    Windows, Intel HD graphics, OpenGL 2.1 (Karsten's laptop)
- Crash when rotating a viewport camera after using the DXA modifier: 
    Windows, NVidia NVS 310, Core profile 3.2 (zhonghuai.wu@student.unsw.edu.au)
- Crash on program startup:
    Windows 8.1, Intel HD Graphics 4600 (driver v10.18.10.3277), Lenovo Y510p (gaoispingisme@gmail.com)
- Frequent crashing
    MacBook Air with the operating system OS X 10.9.5 Maverick (yidong.xia@inl.gov)

Unresolved bugs:

- NearestNeighborFinder doesn't work properly for triclinic cells with small angles.
- Check if there is a memory leak in Construct Surface Mesh modifier.

New analysis features:

- Create Bonds modifier: Add 'lower bound' parameter such that, when using the modifier several times, bonds with different lengths can be assigned different colors.
- Plotting the value of a certain property of a certain particle versus simulation time. To make this work, all simulation frames need to be kept in memory (requested by Taojun & Mathieu Marciante).
- Compute polar decomposition of deformation gradient, F=RU (requested by arun.prakash@fau.de).
- Add modifier for computing the elastic deformation gradient.

New I/O functions:

- Repair import of Crystal Analysis Tool CA files (amlan.dutta@bose.res.in).
- Export to Blender (Paul Erhart, Filip Sund <filip.sund@fys.uio.no>)
- Single precision floating-point numbers, which are used for custom particle properties, cannot represent large integer numbers exactly (e.g. 100400). Find a solution to make it work.
- Parser for Gromacs XTC file format (Chirodeep Bakli <cbakli@gmail.com>)

Performance improvements:

-

Scripting features:

- Scripting interface for viewport overlays (requested by lidong.cauc@gmail.com and johannes.moeller@fau.de).
- Distribute Scipy with Ovito?

Documentation:

- Explain the Create Camera function, which provides a means to fix the current view position.

NirajGupta@my.unt.edu:

I also had a feature request, maybe you can consider adding at some point. Since you have a very quick coordination search implemented, 
would it be possible to also implement a "Compute Radial Property"? Where in one can define a radius, and define an expression, and produce a 
new channel that sums or averages over all the atoms within that radius. For instance, if I've outputted the per atom stress tensor and volume in a 
LAMMPS dump, I can specify a radius  of 10 and write an expression like sum(c_stress1)/sum(c_vol) to get an averaged stress component over all the 
atoms within a 10 ang radius, and assign that value to that atom (more realistically to that point in space). I've written a little post-processing 
tool to do this, but perhaps it would useful to other users. 
