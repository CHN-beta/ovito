**************************************************************************
Steps to build the redistributable program packages for Linux.
**************************************************************************

**************************************************************************
Install essential tools and dependencies on Ubuntu 16.04:
**************************************************************************
sudo apt-get install \
    libfontconfig1-dev \
    libfreetype6-dev \
    libx11-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxrender-dev \
    libxcb1-dev \
    libx11-xcb-dev \
    libxcb-glx0-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libglu1-mesa-dev \
    xsltproc \
    docbook-xml \
    libfftw3-dev \
    libssl-dev \
    libboost-system-dev \
    libboost-thread-dev \
    yasm \
    git \
    libsqlite3-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libbz2-dev \
    libexpat1-dev \
    liblzma-dev \
    libffi-dev \
    uuid-dev \
    liblapack3

- Install CMake >=3.11 from www.cmake.org

**************************************************************************
Build Qt libraries (version 5.12.4)
Note: Update LGPL instructions in the user manual when changing this.
**************************************************************************
./configure \
    -opensource \
    -confirm-license \
    -shared \
    -nomake examples \
    -qt-libpng \
    -qt-libjpeg \
    -qt-pcre \
    -qt-xcb \
    -xkbcommon \
    -no-cups \
    -pch \
    -no-eglfs \
    -no-linuxfb \
    -skip qtactiveqt \
    -skip qtconnectivity \
    -skip qt3d \
    -skip qtcanvas3d \
    -skip qtdatavis3d \
    -skip qtcharts \
    -skip qtlocation \
    -skip qtsensors \
    -skip qtdeclarative \
    -skip qtdoc \
    -skip qtgraphicaleffects \
    -skip qtmultimedia \
    -skip qtquickcontrols \
    -skip qtquickcontrols2 \
    -skip qtpurchasing \
    -skip qtremoteobjects \
    -skip qtsensors \
    -skip qtserialport \
    -skip qttranslations \
    -skip qtwebchannel \
    -skip qtgamepad \
    -skip qtscript \
    -skip qtserialbus \
    -skip qtvirtualkeyboard \
    -skip qtwayland \
    -skip qtwebengine \
    -skip qtwebsockets \
    -skip qtwebview \
    -skip qtwebglplugin \
    -skip qtxmlpatterns \
    -prefix $HOME/progs/qt5

make
make install

**************************************************************************
Build Python (version 3.7.x):
**************************************************************************
- Edit Modules/Setup.dist to enable SSL module:

# Socket module helper for socket(2)
_socket socketmodule.c

SSL=/usr
_ssl _ssl.c \
  -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
  -L$(SSL)/lib -lssl -lcrypto

./configure --enable-shared --enable-optimizations --prefix=$HOME/progs/python
make && make install

#####################################
# Disable user site packages:

Edit "$HOME/progs/python/lib/python3.7/site.py" and set: ENABLE_USER_SITE = False

**************************************************************************
Install Python packages:
**************************************************************************
cd $HOME/progs/python/bin
LD_LIBRARY_PATH=$HOME/progs/python/lib ./pip3 install numpy
LD_LIBRARY_PATH=$HOME/progs/python/lib ./pip3 install sphinx
LD_LIBRARY_PATH=$HOME/progs/python/lib ./pip3 install ipython
LD_LIBRARY_PATH=$HOME/progs/python/lib ./pip3 install matplotlib
LD_LIBRARY_PATH=$HOME/progs/python/lib ./pip3 install PyQt5-sip

**************************************************************************
Build SIP:
**************************************************************************
LD_LIBRARY_PATH=$HOME/progs/python/lib $HOME/progs/python/bin/python3 configure.py
LD_LIBRARY_PATH=$HOME/progs/python/lib make
LD_LIBRARY_PATH=$HOME/progs/python/lib make install

**************************************************************************
Build PyQt5:
**************************************************************************
LD_LIBRARY_PATH=$HOME/progs/python/lib $HOME/progs/python/bin/python3 configure.py \
   --concatenate \
   --concatenate-split 10 \
   --confirm-license \
   --no-designer-plugin \
   --no-qml-plugin \
   --no-tools \
   --qmake=$HOME/progs/qt5/bin/qmake \
   --sip=$HOME/progs/python/bin/sip \
   --enable QtCore \
   --enable QtGui \
   --enable QtWidgets \
   --enable QtNetwork \
   --enable QtOpenGL \
   --enable QtSvg
LD_LIBRARY_PATH=$HOME/progs/python/lib make
LD_LIBRARY_PATH=$HOME/progs/python/lib make install

**************************************************************************
QScintilla2
*************************************************************************
cd QScintilla_gpl-2.*.*/Qt4Qt5/
$HOME/progs/qt5/bin/qmake qscintilla.pro
make

**************************************************************************
Build libav (release 12):
Note: Update LGPL instructions in the user manual when changing this.
**************************************************************************
cd $HOME/progs/
cd libav-12.3
./configure \
  --enable-pic \
  --enable-shared \
  --disable-static \
  --disable-doc \
  --disable-network \
  --disable-programs \
  --disable-debug \
  --disable-filters \
  --disable-decoders \
  --disable-demuxers \
  --prefix=$HOME/progs/libav
make install

**************************************************************************
Build HDF5:
**************************************************************************
cd $HOME/progs/hdf5-1.*.*
mkdir build
cd build
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=../../hdf5 \
  -DBUILD_SHARED_LIBS=ON \
  -DHDF5_ENABLE_Z_LIB_SUPPORT=ON \
  -DHDF5_BUILD_HL_LIB=ON \
  -DBUILD_TESTING=OFF \
  -DHDF5_BUILD_EXAMPLES=OFF \
  ..
make install

**************************************************************************
Build NetCDF:
**************************************************************************
cd $HOME/progs/netcdf-c-*.*
mkdir build
cd build
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=../../netcdf \
  -DENABLE_DAP=OFF \
  -DENABLE_EXAMPLES=OFF \
  -DENABLE_TESTS=OFF \
  -DBUILD_TESTING=OFF \
  -DBUILD_UTILITIES=OFF \
  -DENABLE_HDF4=OFF \
  -DUSE_HDF5=ON \
  -DHDF5_DIR=$PWD/../../hdf5/share/cmake/hdf5 \
  ..
make install

**************************************************************************
Download Intel TBB (binary version for Linux)
**************************************************************************
- Extract to $HOME/progs/tbb2019_20190605oss/

**************************************************************************
Download Intel ISPC compiler
**************************************************************************
- Old releases: https://sourceforge.net/projects/ispcmirror/files/
- Tested with release 1.9.2

**************************************************************************
Download and build Intel Embree
**************************************************************************
cd $HOME/progs/
git clone https://github.com/embree/embree.git
cd embree
git checkout v3.5.2
mkdir build
cd build
cmake \
      -DCMAKE_INSTALL_PREFIX=$HOME/progs/embree_install \
      -DEMBREE_ISPC_EXECUTABLE=`echo $HOME/progs/ispc-v*-linux/ispc` \
      -DTBB_INCLUDE_DIR=`echo $HOME/progs/tbb*oss`/include/ \
      -DTBB_LIBRARY=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbb.so \
      -DTBB_LIBRARY_MALLOC=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbbmalloc.so \
      -DEMBREE_TBB_ROOT=`echo $HOME/progs/tbb*oss` \
      -DEMBREE_TUTORIALS=OFF \
      ..
make install

**************************************************************************
Download and build Intel OSPRay
**************************************************************************
cd $HOME/progs/
git clone https://github.com/ospray/ospray.git
cd ospray
git checkout v1.8.4
mkdir build
cd build
cmake \
      -DCMAKE_INSTALL_PREFIX=$HOME/progs/ospray_install \
      -DISPC_EXECUTABLE=`echo $HOME/progs/ispc-v*-linux/ispc` \
      -Dembree_DIR=`echo $HOME/progs/embree_install/lib/cmake/embree-*` \
      -DOSPRAY_APPS_BENCHMARK=OFF \
      -DOSPRAY_APPS_EXAMPLEVIEWER=OFF \
      -DOSPRAY_APPS_UTILITIES=OFF \
      -DOSPRAY_ENABLE_TUTORIALS=OFF \
      -DTBB_ROOT=`echo $HOME/progs/tbb*oss` \
      -DBUILD_SHARED_LIBS=ON \
      ..
make install
cp -d $HOME/progs/embree_install/lib/libembree*.so* $HOME/progs/ospray_install/lib/
cp -d $HOME/progs/tbb*oss/lib/intel64/gcc4.7/libtbb.so.* $HOME/progs/ospray_install/lib/
cp -d $HOME/progs/tbb*oss/lib/intel64/gcc4.7/libtbbmalloc.so.* $HOME/progs/ospray_install/lib/

**************************************************************************
Download and build libssh
Note: Update LGPL instructions in user manual when changing this.
**************************************************************************
cd $HOME/progs/libssh-*.*
mkdir build
cd build
cmake \
  -DCMAKE_INSTALL_PREFIX=$HOME/progs/libssh \
  -DCMAKE_BUILD_TYPE=Release \
  -DWITH_SERVER=OFF \
  ..
make && make install

**************************************************************************
Set the following flags in the CMake configuration to
build Ovito WITHOUT Python support:
**************************************************************************
export LD_LIBRARY_PATH=$HOME/progs/libav/lib:$LD_LIBRARY_PATH
cmake \
  -DOVITO_BUILD_DOCUMENTATION=ON \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=../release_install \
  -DOVITO_REDISTRIBUTABLE_PACKAGE=ON \
  -DOVITO_DOUBLE_PRECISION_FP=ON \
  -DHDF5_DIR=$HOME/progs/hdf5/share/cmake/hdf5 \
  -DnetCDF_DIR=$HOME/progs/netcdf/lib/cmake/netCDF \
  -DLIBSSH_INCLUDE_DIR=$HOME/progs/libssh/include \
  -DLIBSSH_LIBRARY=$HOME/progs/libssh/lib/libssh.so \
  -DCMAKE_PREFIX_PATH=$HOME/progs/qt5/ \
  -DLIBAV_INCLUDE_DIR=$HOME/progs/libav/include \
  -DLIBAV_LIBRARY_DIR=$HOME/progs/libav/lib \
  -DOVITO_BUILD_PLUGIN_PYSCRIPT=OFF \
  -DOVITO_BUILD_PLUGIN_OSPRAY=ON \
  -Dospray_DIR=`echo $HOME/progs/ospray_install/lib/cmake/ospray-*` \
  -Dembree_DIR=`echo $HOME/progs/embree_install/lib/cmake/embree-*` \
  -DISPC_EXECUTABLE=`echo $HOME/progs/ispc-*-linux/ispc` \
  -DTBB_INCLUDE_DIR=`echo $HOME/progs/tbb*oss`/include/ \
  -DTBB_LIBRARY=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbb.so \
  -DTBB_LIBRARY_MALLOC=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbbmalloc.so \
  -DTBB_DIR=`echo $HOME/progs/tbb*oss`/cmake \
  -DTBB_ROOT=`echo $HOME/progs/tbb*oss` \
  ../source/

**************************************************************************
Set the following flags in the CMake configuration to build all features:
**************************************************************************
export LD_LIBRARY_PATH=$HOME/progs/libav/lib:$LD_LIBRARY_PATH
cmake \
  -DOVITO_BUILD_DOCUMENTATION=ON \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=../release_install \
  -DOVITO_REDISTRIBUTABLE_PACKAGE=ON \
  -DOVITO_DOUBLE_PRECISION_FP=ON \
  -DHDF5_DIR=$HOME/progs/hdf5/share/cmake/hdf5 \
  -DnetCDF_DIR=$HOME/progs/netcdf/lib/cmake/netCDF \
  -DPYTHON_EXECUTABLE=$HOME/progs/python/bin/python3 \
  -DPYTHON_LIBRARY=`echo $HOME/progs/python/lib/libpython*.so.*` \
  -DPYTHON_INCLUDE_DIR=`echo $HOME/progs/python/include/python*` \
  -DCMAKE_PREFIX_PATH=$HOME/progs/qt5/ \
  -DQSCINTILLA_INCLUDE_DIR=`echo $HOME/progs/QScintilla_gpl-*`/Qt4Qt5/ \
  -DQSCINTILLA_LIBRARY=`echo $HOME/progs/QScintilla_gpl-*/Qt4Qt5/libqscintilla2_qt5.so.*` \
  -DLIBAV_INCLUDE_DIR=$HOME/progs/libav/include \
  -DLIBAV_LIBRARY_DIR=$HOME/progs/libav/lib \
  -DOVITO_BUILD_PLUGIN_OSPRAY=ON \
  -Dospray_DIR=`echo $HOME/progs/ospray_install/lib/cmake/ospray-*` \
  -Dembree_DIR=`echo $HOME/progs/embree_install/lib/cmake/embree-*` \
  -DISPC_EXECUTABLE=`echo $HOME/progs/ispc-*-linux/ispc` \
  -DTBB_INCLUDE_DIR=`echo $HOME/progs/tbb*oss`/include/ \
  -DTBB_LIBRARY=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbb.so \
  -DTBB_LIBRARY_MALLOC=`echo $HOME/progs/tbb*oss`/lib/intel64/gcc4.7/libtbbmalloc.so \
  -DTBB_DIR=`echo $HOME/progs/tbb*oss`/cmake \
  -DTBB_ROOT=`echo $HOME/progs/tbb*oss` \
  -DLIBSSH_INCLUDE_DIR=$HOME/progs/libssh/include \
  -DLIBSSH_LIBRARY=$HOME/progs/libssh/lib/libssh.so \
  ../source/

#!/bin/bash
cmake . && make && cpack && mv *.tar.gz /mnt/temp/

**************************************************************************
How to rebuild the Docker images for the Gitlab registry:
**************************************************************************
mkdir docker_image
cd docker_image
ln -s $HOME/prj/ovito/doc/develop/docker/linux_build/Dockerfile .
docker login registry.gitlab.com
docker build -t registry.gitlab.com/stuko/ovito/linux_build .
docker push registry.gitlab.com/stuko/ovito/linux_build