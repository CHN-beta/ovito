**************************************************************************
This file contains instructions how to prepare the dependencies
when building the monolithic (statically linked) version of OVITO
on a Ubuntu Linux system. This is the official build distributed
through the website. 
Building a dynamically linked executable on a local system is easier, and 
one can use the shared libraries provided by the Linux package manager in 
most cases.
**************************************************************************

**************************************************************************
Install essential tools and dependencies on Ubuntu 10.04 for 
building the static executable:
**************************************************************************

sudo apt-get install build-essential perl python git libfreetype6-dev libfontconfig-dev \
                     libx11-xcb-dev libpcre3-dev libxi-dev libgmp-dev \
                     libmpfr-dev libsm-dev libice-dev libnetcdf-dev libhdf5-serial-dev \
                     libglu1-mesa-dev libxrender-dev xsltproc docbook-xml docbook-xsl docbook-xsl-doc-html \
                     python-sphinx libssl-dev liblapack3gf ncurses-dev

**************************************************************************
To build the dynamically-linked executable instead (on Ubuntu 14.04):
**************************************************************************

sudo apt-get install build-essential git cmake-curses-gui qt5-default qtscript5-dev \
                     libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev \
                     libavutil-dev libswscale-dev libcgal-dev libnetcdf-dev libhdf5-dev libhdf5-serial-dev \
                     libbotan1.10-dev libmuparser-dev python-dev libboost-python-dev python-sphinx \
                     xsltproc docbook-xml docbook-xsl docbook-xsl-doc-html

**************************************************************************
Install GNU g++ 4.8 compiler on Ubuntu 10.04
**************************************************************************

sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-4.8 g++-4.8
sudo update-alternatives --remove-all gcc 
sudo update-alternatives --remove-all g++
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 20
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20
sudo update-alternatives --config gcc
sudo update-alternatives --config g++
export CC=gcc-4.8
export CXX=g++-4.8

**************************************************************************
Build static Qt libraries (version 5.3.2) on Ubuntu 10.04:

Edit file qtbase/mkspecs/common/g++-base.conf and specify
paths to latest gcc and g++ compilers if necessary (e.g. 'g++-4.8').
**************************************************************************

export CC=gcc-4.8
export CXX=g++-4.8
./configure \
	-opensource \
	-static \
	-confirm-license \
	-no-qml-debug \
	-nomake examples \
	-qt-libpng \
	-qt-libjpeg \
	-qt-pcre \
	-qt-xcb \
	-qt-xkbcommon \
	-no-nis \
	-no-cups \
	-no-glib \
	-fontconfig \
	-skip qtconnectivity -skip qtmultimedia -skip qtwebkit -skip qtwebkit-examples -skip qtxmlpatterns -skip qtlocation \
	-skip qtsensors -skip qtdeclarative -skip qtdoc -skip qtquick1 -skip qtquickcontrols \
	-skip qtserialport -skip qtgraphicaleffects -skip qttranslations \
	-prefix $HOME/progs/qt5static

make
make install

**************************************************************************
Build Python (version 2.7.x):
**************************************************************************

Edit Modules/Setup to enable SSL module:

# Socket module helper for socket(2)
_socket socketmodule.c timemodule.c

SSL=/usr
_ssl _ssl.c \
	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
	-L$(SSL)/lib -lssl -lcrypto

export CC=gcc-4.8
export CXX=g++-4.8
./configure --enable-shared --prefix=$HOME/progs/python
make
make install

Install Sphinx:

cd $HOME/progs/python/bin
wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
LD_LIBRARY_PATH=$PWD/../lib ./python ez_setup.py --insecure
LD_LIBRARY_PATH=$PWD/../lib ./easy_install sphinx

**************************************************************************
Build NumPy:
**************************************************************************

export CC=gcc-4.8
export CXX=g++-4.8
LD_LIBRARY_PATH=$HOME/progs/python/lib $HOME/progs/python/bin/python setup.py install

**************************************************************************
Build static versions of Boost libraries (release 1.55):
**************************************************************************

echo "using gcc : 4.8 : /usr/bin/g++-4.8 ; " >> tools/build/v2/user-config.jam
echo "using python : 2.7 : /home/stuko/progs/python ; " >> tools/build/v2/user-config.jam
./bootstrap.sh \
	--with-libraries=system,thread,python \
	--with-python=$HOME/progs/python/bin/python \
	--with-python-root=$HOME/progs/python \
	--with-python-version=2.7 \
	--prefix=$HOME/progs/booststatic

./b2 toolset=gcc-4.8 release link=static install

**************************************************************************
Build static CGAL library (release 4.3):
**************************************************************************

export CC=gcc-4.8
export CXX=g++-4.8
cmake -DBOOST_ROOT=$HOME/progs/booststatic \
	-DBUILD_SHARED_LIBS=OFF \
	-DGMP_LIBRARIES=/usr/lib/libgmp.a \
	-DMPFR_LIBRARIES=/usr/lib/libmpfr.a \
	-DWITH_CGAL_Qt3=OFF \
	-DWITH_CGAL_Qt4=OFF \
	-DWITH_CGAL_ImageIO=OFF \
	.

make

**************************************************************************
Build static libav (release 0.8.8) on Ubuntu 10.04:
**************************************************************************

sudo apt-get install yasm
wget http://libav.org/releases/libav-0.8.8.tar.gz
tar xzfv libav-0.8.8.tar.gz
cd libav-0.8.8
export CC=gcc-4.8
export CXX=g++-4.8
./configure \
	--disable-ffmpeg \
	--disable-avprobe \
	--disable-avplay \
	--disable-avserver \
	--disable-debug \
	--prefix=$HOME/progs/libavstatic

make install

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/progs/libavstatic/lib/pkgconfig

**************************************************************************
Set the following flags in the CMake configuration to build all features:
**************************************************************************

export CC=gcc-4.8
export CXX=g++-4.8
ccmake \
	-DOVITO_BUILD_DOCUMENTATION=ON \
	-DOVITO_BUILD_PLUGIN_CRYSTALANALYSIS=ON \
	-DOVITO_BUILD_PLUGIN_NETCDFPLUGIN=ON \
	-DOVITO_BUILD_PLUGIN_PYSCRIPT=ON \
	-DOVITO_VIDEO_OUTPUT_SUPPORT=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DBOOST_ROOT=$HOME/progs/booststatic \
	-DPYTHON_LIBRARY=$HOME/progs/python/lib/libpython2.7.so.1.0 \
	-DPYTHON_INCLUDE_DIR=$HOME/progs/python/include/python2.7 \
	-DSPHINX_PROCESSOR=$HOME/progs/python/bin/sphinx-build \
	....


